{"version":3,"sources":["../../src/cli/index.ts","../../node_modules/tsup/assets/cjs_shims.js","../../src/cli/config.ts","../../src/lib/config.ts","../../src/lib/api/core/ApiError.ts","../../src/lib/api/core/CancelablePromise.ts","../../src/lib/api/core/OpenAPI.ts","../../src/lib/api/core/request.ts","../../src/lib/isomorphic.ts","../../src/lib/api/services/AuthorizationService.ts","../../src/lib/api/services/CircuitsService.ts","../../src/lib/api/services/InternalService.ts","../../src/lib/api/services/ProofsService.ts","../../src/lib/api/services/TokenService.ts","../../src/lib/logging.ts","../../src/cli/init.ts","../../src/cli/utils.ts","../../src/cli/deploy.ts","../../src/cli/lint.ts","../../src/cli/login.ts","../../src/cli/logout.ts","../../src/cli/whoami.ts","../../src/lib/client.ts","../../src/lib/index.ts"],"sourcesContent":["#! /usr/bin/env node\nimport assert from \"assert\";\nimport { argv, exit } from \"process\";\n\nimport { Command } from \"@commander-js/extra-typings\";\n\nimport { configCommand } from \"cli/config\";\nimport { initCommand } from \"cli/init\";\nimport { deployCommand } from \"cli/deploy\";\nimport { lintCommand } from \"cli/lint\";\nimport { loginCommand } from \"cli/login\";\nimport { logoutCommand } from \"cli/logout\";\nimport { whoamiCommand } from \"cli/whoami\";\nimport { loadPackageJson } from \"cli/utils\";\nimport sindri from \"lib\";\nimport { logger } from \"lib/logging\";\n\nexport const program = new Command()\n  .name(\"sindri\")\n  .description(\"The Sindri CLI client.\")\n  .version(loadPackageJson().version ?? \"unknown\")\n  .option(\"-d, --debug\", \"Enable debug logging.\", false)\n  .option(\n    \"-q, --quiet\",\n    \"Disable all logging aside from direct command outputs for programmatic consumption.\",\n    false,\n  )\n  .addCommand(configCommand)\n  .addCommand(initCommand)\n  .addCommand(deployCommand)\n  .addCommand(lintCommand)\n  .addCommand(loginCommand)\n  .addCommand(logoutCommand)\n  .addCommand(whoamiCommand)\n  // Parse the base command options and respond to them before invoking the subcommand.\n  .hook(\"preAction\", async (command) => {\n    // Set the logging level.\n    const { debug, quiet } = command.opts();\n    if (debug && quiet) {\n      logger.error(\n        \"You cannot specify both the `--debug` and `--quiet` arguments.\",\n      );\n      return exit(1);\n    }\n    if (debug) {\n      logger.level = \"trace\";\n    } else if (quiet) {\n      logger.level = \"silent\";\n    } else {\n      logger.level = \"info\";\n    }\n    logger.debug(`Set log level to \"${logger.level}\".`);\n\n    // Make sure the client is loaded and initialized before any subcommands run.\n    // Note that this also initializes the config.\n    assert(sindri);\n  });\n\nif (require.main === module) {\n  program.parse(argv);\n}\n","// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL('file:' + __filename).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n","import { Command } from \"@commander-js/extra-typings\";\n\nimport { Config } from \"lib/config\";\nimport { print } from \"lib/logging\";\n\nexport const configListCommand = new Command()\n  .name(\"list\")\n  .description(\"Show the current config.\")\n  .action(async () => {\n    const config = new Config();\n    print(config.config);\n  });\n\nexport const configCommand = new Command()\n  .name(\"config\")\n  .description(\"Commands related to configuration and config files.\")\n  .addCommand(configListCommand);\n","import fs from \"fs\";\nimport path from \"path\";\n\nimport envPaths from \"env-paths\";\nimport _ from \"lodash\";\nimport { z } from \"zod\";\n\nimport { OpenAPI } from \"lib/api\";\nimport { logger } from \"lib/logging\";\n\nconst getConfigPath = (): string => {\n  const paths = envPaths(\"sindri\", {\n    suffix: \"\",\n  });\n  return path.join(paths.config, \"sindri.conf.json\");\n};\n\nconst ConfigSchema = z.object({\n  auth: z\n    .nullable(\n      z.object({\n        apiKey: z.string(),\n        apiKeyId: z.string(),\n        apiKeyName: z.string(),\n        baseUrl: z.string().url(),\n        teamId: z.number(),\n        teamSlug: z.string(),\n      }),\n    )\n    .default(null),\n});\n\ntype ConfigSchema = z.infer<typeof ConfigSchema>;\n\nconst defaultConfig: ConfigSchema = ConfigSchema.parse({});\n\nexport const loadConfig = (): ConfigSchema => {\n  const configPath = getConfigPath();\n  if (fs.existsSync(configPath)) {\n    logger.debug(`Loading config from \"${configPath}\".`);\n    try {\n      const configFileContents: string = fs.readFileSync(configPath, {\n        encoding: \"utf-8\",\n      });\n      const loadedConfig = ConfigSchema.parse(JSON.parse(configFileContents));\n      logger.debug(\"Config loaded successfully.\");\n      return loadedConfig;\n    } catch (error) {\n      logger.warn(\n        `The config schema in \"${configPath}\" is invalid and will not be used.\\n` +\n          `To remove it and start fresh, run:\\n    rm ${configPath}`,\n      );\n      logger.debug(error);\n    }\n  }\n  logger.debug(\n    `Config file \"${configPath}\" does not exist, initializing default config.`,\n  );\n  return _.cloneDeep(defaultConfig);\n};\n\nexport class Config {\n  protected _config!: ConfigSchema;\n  protected static instance: Config;\n\n  constructor() {\n    if (!Config.instance) {\n      this._config = loadConfig();\n      Config.instance = this;\n      // Prepare API the client with the loaded credentials.\n      if (this._config.auth) {\n        OpenAPI.BASE = this._config.auth.baseUrl;\n        OpenAPI.TOKEN = this._config.auth.apiKey;\n      }\n    }\n    return Config.instance;\n  }\n\n  get auth(): ConfigSchema[\"auth\"] {\n    return _.cloneDeep(this._config.auth);\n  }\n\n  get config(): ConfigSchema {\n    return _.cloneDeep(this._config);\n  }\n\n  update(configData: Partial<ConfigSchema>) {\n    // Merge and validate the configs.\n    logger.debug(\"Merging in config update:\");\n    logger.debug(configData);\n    const newConfig: ConfigSchema = _.cloneDeep(this._config);\n    _.merge(newConfig, configData);\n    this._config = ConfigSchema.parse(newConfig);\n\n    // Create the directory if it doesn't exist.\n    const configPath = getConfigPath();\n    const directory = path.dirname(configPath);\n    if (!fs.existsSync(directory)) {\n      fs.mkdirSync(directory, { recursive: true });\n    }\n\n    // Write out the new config.\n    logger.debug(`Writing merged config to \"${configPath}\":`, this._config);\n    fs.writeFileSync(configPath, JSON.stringify(this._config, null, 2), {\n      encoding: \"utf-8\",\n    });\n  }\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from \"./ApiRequestOptions\";\nimport type { ApiResult } from \"./ApiResult\";\n\nexport class ApiError extends Error {\n  public readonly url: string;\n  public readonly status: number;\n  public readonly statusText: string;\n  public readonly body: any;\n  public readonly request: ApiRequestOptions;\n\n  constructor(\n    request: ApiRequestOptions,\n    response: ApiResult,\n    message: string,\n  ) {\n    super(message);\n\n    this.name = \"ApiError\";\n    this.url = response.url;\n    this.status = response.status;\n    this.statusText = response.statusText;\n    this.body = response.body;\n    this.request = request;\n  }\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport class CancelError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"CancelError\";\n  }\n\n  public get isCancelled(): boolean {\n    return true;\n  }\n}\n\nexport interface OnCancel {\n  readonly isResolved: boolean;\n  readonly isRejected: boolean;\n  readonly isCancelled: boolean;\n\n  (cancelHandler: () => void): void;\n}\n\nexport class CancelablePromise<T> implements Promise<T> {\n  #isResolved: boolean;\n  #isRejected: boolean;\n  #isCancelled: boolean;\n  readonly #cancelHandlers: (() => void)[];\n  readonly #promise: Promise<T>;\n  #resolve?: (value: T | PromiseLike<T>) => void;\n  #reject?: (reason?: any) => void;\n\n  constructor(\n    executor: (\n      resolve: (value: T | PromiseLike<T>) => void,\n      reject: (reason?: any) => void,\n      onCancel: OnCancel,\n    ) => void,\n  ) {\n    this.#isResolved = false;\n    this.#isRejected = false;\n    this.#isCancelled = false;\n    this.#cancelHandlers = [];\n    this.#promise = new Promise<T>((resolve, reject) => {\n      this.#resolve = resolve;\n      this.#reject = reject;\n\n      const onResolve = (value: T | PromiseLike<T>): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#isResolved = true;\n        this.#resolve?.(value);\n      };\n\n      const onReject = (reason?: any): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#isRejected = true;\n        this.#reject?.(reason);\n      };\n\n      const onCancel = (cancelHandler: () => void): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#cancelHandlers.push(cancelHandler);\n      };\n\n      Object.defineProperty(onCancel, \"isResolved\", {\n        get: (): boolean => this.#isResolved,\n      });\n\n      Object.defineProperty(onCancel, \"isRejected\", {\n        get: (): boolean => this.#isRejected,\n      });\n\n      Object.defineProperty(onCancel, \"isCancelled\", {\n        get: (): boolean => this.#isCancelled,\n      });\n\n      return executor(onResolve, onReject, onCancel as OnCancel);\n    });\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"Cancellable Promise\";\n  }\n\n  public then<TResult1 = T, TResult2 = never>(\n    onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): Promise<TResult1 | TResult2> {\n    return this.#promise.then(onFulfilled, onRejected);\n  }\n\n  public catch<TResult = never>(\n    onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): Promise<T | TResult> {\n    return this.#promise.catch(onRejected);\n  }\n\n  public finally(onFinally?: (() => void) | null): Promise<T> {\n    return this.#promise.finally(onFinally);\n  }\n\n  public cancel(): void {\n    if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n      return;\n    }\n    this.#isCancelled = true;\n    if (this.#cancelHandlers.length) {\n      try {\n        for (const cancelHandler of this.#cancelHandlers) {\n          cancelHandler();\n        }\n      } catch (error) {\n        console.warn(\"Cancellation threw an error\", error);\n        return;\n      }\n    }\n    this.#cancelHandlers.length = 0;\n    this.#reject?.(new CancelError(\"Request aborted\"));\n  }\n\n  public get isCancelled(): boolean {\n    return this.#isCancelled;\n  }\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from \"./ApiRequestOptions\";\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\ntype Headers = Record<string, string>;\n\nexport type OpenAPIConfig = {\n  BASE: string;\n  VERSION: string;\n  WITH_CREDENTIALS: boolean;\n  CREDENTIALS: \"include\" | \"omit\" | \"same-origin\";\n  TOKEN?: string | Resolver<string> | undefined;\n  USERNAME?: string | Resolver<string> | undefined;\n  PASSWORD?: string | Resolver<string> | undefined;\n  HEADERS?: Headers | Resolver<Headers> | undefined;\n  ENCODE_PATH?: ((path: string) => string) | undefined;\n};\n\nexport const OpenAPI: OpenAPIConfig = {\n  BASE: \"https://sindri.app\",\n  VERSION: \"1.5.40\",\n  WITH_CREDENTIALS: false,\n  CREDENTIALS: \"include\",\n  TOKEN: undefined,\n  USERNAME: undefined,\n  PASSWORD: undefined,\n  HEADERS: undefined,\n  ENCODE_PATH: undefined,\n};\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport axios from \"axios\";\nimport type {\n  AxiosError,\n  AxiosRequestConfig,\n  AxiosResponse,\n  AxiosInstance,\n} from \"axios\";\nimport { FormData } from \"lib/isomorphic\"; // DO NOT REMOVE OR CHANGE THIS, MANUAL EDIT!!!\n\nimport { ApiError } from \"./ApiError\";\nimport type { ApiRequestOptions } from \"./ApiRequestOptions\";\nimport type { ApiResult } from \"./ApiResult\";\nimport { CancelablePromise } from \"./CancelablePromise\";\nimport type { OnCancel } from \"./CancelablePromise\";\nimport type { OpenAPIConfig } from \"./OpenAPI\";\n\nexport const isDefined = <T>(\n  value: T | null | undefined,\n): value is Exclude<T, null | undefined> => {\n  return value !== undefined && value !== null;\n};\n\nexport const isString = (value: any): value is string => {\n  return typeof value === \"string\";\n};\n\nexport const isStringWithValue = (value: any): value is string => {\n  return isString(value) && value !== \"\";\n};\n\nexport const isBlob = (value: any): value is Blob => {\n  return (\n    typeof value === \"object\" &&\n    typeof value.type === \"string\" &&\n    typeof value.stream === \"function\" &&\n    typeof value.arrayBuffer === \"function\" &&\n    typeof value.constructor === \"function\" &&\n    typeof value.constructor.name === \"string\" &&\n    /^(Blob|File)$/.test(value.constructor.name) &&\n    /^(Blob|File)$/.test(value[Symbol.toStringTag])\n  );\n};\n\nexport const isFormData = (value: any): value is FormData => {\n  return value instanceof FormData;\n};\n\nexport const isSuccess = (status: number): boolean => {\n  return status >= 200 && status < 300;\n};\n\nexport const base64 = (str: string): string => {\n  try {\n    return btoa(str);\n  } catch (err) {\n    // @ts-ignore\n    return Buffer.from(str).toString(\"base64\");\n  }\n};\n\nexport const getQueryString = (params: Record<string, any>): string => {\n  const qs: string[] = [];\n\n  const append = (key: string, value: any) => {\n    qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n  };\n\n  const process = (key: string, value: any) => {\n    if (isDefined(value)) {\n      if (Array.isArray(value)) {\n        value.forEach((v) => {\n          process(key, v);\n        });\n      } else if (typeof value === \"object\") {\n        Object.entries(value).forEach(([k, v]) => {\n          process(`${key}[${k}]`, v);\n        });\n      } else {\n        append(key, value);\n      }\n    }\n  };\n\n  Object.entries(params).forEach(([key, value]) => {\n    process(key, value);\n  });\n\n  if (qs.length > 0) {\n    return `?${qs.join(\"&\")}`;\n  }\n\n  return \"\";\n};\n\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\n  const encoder = config.ENCODE_PATH || encodeURI;\n\n  const path = options.url\n    .replace(\"{api-version}\", config.VERSION)\n    .replace(/{(.*?)}/g, (substring: string, group: string) => {\n      if (options.path?.hasOwnProperty(group)) {\n        return encoder(String(options.path[group]));\n      }\n      return substring;\n    });\n\n  const url = `${config.BASE}${path}`;\n  if (options.query) {\n    return `${url}${getQueryString(options.query)}`;\n  }\n  return url;\n};\n\nexport const getFormData = (\n  options: ApiRequestOptions,\n): FormData | undefined => {\n  if (options.formData) {\n    // This is a manual edit to allow `FormData` to be passed in directly.\n    // DO NOT REMOVE THIS!\n    if (options.formData instanceof FormData) {\n      return options.formData;\n    }\n\n    const formData = new FormData();\n\n    const process = (key: string, value: any) => {\n      if (isString(value) || isBlob(value)) {\n        formData.append(key, value);\n      } else {\n        formData.append(key, JSON.stringify(value));\n      }\n    };\n\n    Object.entries(options.formData)\n      .filter(([_, value]) => isDefined(value))\n      .forEach(([key, value]) => {\n        if (Array.isArray(value)) {\n          value.forEach((v) => process(key, v));\n        } else {\n          process(key, value);\n        }\n      });\n\n    return formData;\n  }\n  return undefined;\n};\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\n\nexport const resolve = async <T>(\n  options: ApiRequestOptions,\n  resolver?: T | Resolver<T>,\n): Promise<T | undefined> => {\n  if (typeof resolver === \"function\") {\n    return (resolver as Resolver<T>)(options);\n  }\n  return resolver;\n};\n\nexport const getHeaders = async (\n  config: OpenAPIConfig,\n  options: ApiRequestOptions,\n  formData?: FormData,\n): Promise<Record<string, string>> => {\n  const token = await resolve(options, config.TOKEN);\n  const username = await resolve(options, config.USERNAME);\n  const password = await resolve(options, config.PASSWORD);\n  const additionalHeaders = await resolve(options, config.HEADERS);\n  // DO NOT REMOVE THIS, MANUAL EDIT!\n  const formHeaders =\n    (formData &&\n      \"getHeaders\" in formData &&\n      typeof formData?.getHeaders === \"function\" &&\n      formData?.getHeaders()) ||\n    {};\n\n  const headers = Object.entries({\n    Accept: \"application/json\",\n    ...additionalHeaders,\n    ...options.headers,\n    ...formHeaders,\n  })\n    .filter(([_, value]) => isDefined(value))\n    .reduce(\n      (headers, [key, value]) => ({\n        ...headers,\n        [key]: String(value),\n      }),\n      {} as Record<string, string>,\n    );\n\n  if (isStringWithValue(token)) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  if (isStringWithValue(username) && isStringWithValue(password)) {\n    const credentials = base64(`${username}:${password}`);\n    headers[\"Authorization\"] = `Basic ${credentials}`;\n  }\n\n  if (options.body) {\n    if (options.mediaType) {\n      headers[\"Content-Type\"] = options.mediaType;\n    } else if (isBlob(options.body)) {\n      headers[\"Content-Type\"] = options.body.type || \"application/octet-stream\";\n    } else if (isString(options.body)) {\n      headers[\"Content-Type\"] = \"text/plain\";\n    } else if (!isFormData(options.body)) {\n      headers[\"Content-Type\"] = \"application/json\";\n    }\n  }\n\n  return headers;\n};\n\nexport const getRequestBody = (options: ApiRequestOptions): any => {\n  if (options.body) {\n    return options.body;\n  }\n  return undefined;\n};\n\nexport const sendRequest = async <T>(\n  config: OpenAPIConfig,\n  options: ApiRequestOptions,\n  url: string,\n  body: any,\n  formData: FormData | undefined,\n  headers: Record<string, string>,\n  onCancel: OnCancel,\n  axiosClient: AxiosInstance,\n): Promise<AxiosResponse<T>> => {\n  const source = axios.CancelToken.source();\n\n  const requestConfig: AxiosRequestConfig = {\n    url,\n    headers,\n    data: body ?? formData,\n    method: options.method,\n    withCredentials: config.WITH_CREDENTIALS,\n    cancelToken: source.token,\n  };\n\n  onCancel(() => source.cancel(\"The user aborted a request.\"));\n\n  try {\n    return await axiosClient.request(requestConfig);\n  } catch (error) {\n    const axiosError = error as AxiosError<T>;\n    if (axiosError.response) {\n      return axiosError.response;\n    }\n    throw error;\n  }\n};\n\nexport const getResponseHeader = (\n  response: AxiosResponse<any>,\n  responseHeader?: string,\n): string | undefined => {\n  if (responseHeader) {\n    const content = response.headers[responseHeader];\n    if (isString(content)) {\n      return content;\n    }\n  }\n  return undefined;\n};\n\nexport const getResponseBody = (response: AxiosResponse<any>): any => {\n  if (response.status !== 204) {\n    return response.data;\n  }\n  return undefined;\n};\n\nexport const catchErrorCodes = (\n  options: ApiRequestOptions,\n  result: ApiResult,\n): void => {\n  const errors: Record<number, string> = {\n    400: \"Bad Request\",\n    401: \"Unauthorized\",\n    403: \"Forbidden\",\n    404: \"Not Found\",\n    500: \"Internal Server Error\",\n    502: \"Bad Gateway\",\n    503: \"Service Unavailable\",\n    ...options.errors,\n  };\n\n  const error = errors[result.status];\n  if (error) {\n    throw new ApiError(options, result, error);\n  }\n\n  if (!result.ok) {\n    const errorStatus = result.status ?? \"unknown\";\n    const errorStatusText = result.statusText ?? \"unknown\";\n    const errorBody = (() => {\n      try {\n        return JSON.stringify(result.body, null, 2);\n      } catch (e) {\n        return undefined;\n      }\n    })();\n\n    throw new ApiError(\n      options,\n      result,\n      `Generic Error: status: ${errorStatus}; status text: ${errorStatusText}; body: ${errorBody}`,\n    );\n  }\n};\n\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @param axiosClient The axios client instance to use\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = <T>(\n  config: OpenAPIConfig,\n  options: ApiRequestOptions,\n  axiosClient: AxiosInstance = axios,\n): CancelablePromise<T> => {\n  return new CancelablePromise(async (resolve, reject, onCancel) => {\n    try {\n      const url = getUrl(config, options);\n      const formData = getFormData(options);\n      const body = getRequestBody(options);\n      const headers = await getHeaders(config, options, formData);\n\n      if (!onCancel.isCancelled) {\n        const response = await sendRequest<T>(\n          config,\n          options,\n          url,\n          body,\n          formData,\n          headers,\n          onCancel,\n          axiosClient,\n        );\n        const responseBody = getResponseBody(response);\n        const responseHeader = getResponseHeader(\n          response,\n          options.responseHeader,\n        );\n\n        const result: ApiResult = {\n          url,\n          ok: isSuccess(response.status),\n          status: response.status,\n          statusText: response.statusText,\n          body: responseHeader ?? responseBody,\n        };\n\n        catchErrorCodes(options, result);\n\n        resolve(result.body);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n","import { File as NodeFile } from \"buffer\";\n\nimport { FormData as NodeFormData } from \"formdata-node\";\n\nexport function assertType<T>(value: unknown) {\n  function isType<T>(value: unknown): value is T {\n    return true || value;\n  }\n  if (!isType<T>(value)) throw new Error(\"Impossible.\");\n}\n\nexport type { NodeFile, NodeFormData };\nexport type BrowserFile = File;\nexport type BrowserFormData = FormData;\n\nexport const File = process.env.BROWSER_BUILD ? window.File : NodeFile;\nexport const FormData = process.env.BROWSER_BUILD\n  ? window.FormData\n  : NodeFormData;\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ActionResponse } from \"../models/ActionResponse\";\nimport type { APIKeyResponse } from \"../models/APIKeyResponse\";\nimport type { ObtainApikeyInput } from \"../models/ObtainApikeyInput\";\n\nimport type { CancelablePromise } from \"../core/CancelablePromise\";\nimport { OpenAPI } from \"../core/OpenAPI\";\nimport { request as __request } from \"../core/request\";\n\nexport class AuthorizationService {\n  /**\n   * Generate API Key\n   * Generates a long-term API Key from your account's username and password.\n   * @param requestBody\n   * @returns APIKeyResponse OK\n   * @throws ApiError\n   */\n  public static apikeyGenerate(\n    requestBody: ObtainApikeyInput,\n  ): CancelablePromise<APIKeyResponse> {\n    return __request(OpenAPI, {\n      method: \"POST\",\n      url: \"/api/apikey/generate\",\n      body: requestBody,\n      mediaType: \"application/json\",\n      errors: {\n        401: `Unauthorized`,\n      },\n    });\n  }\n\n  /**\n   * Generate long-term API Key (requires prior authentication)\n   * Return a long-term API key for the user's team.\n   * @param name\n   * @returns APIKeyResponse Created\n   * @throws ApiError\n   */\n  public static apikeyGenerateWithAuth(\n    name: string = \"\",\n  ): CancelablePromise<APIKeyResponse> {\n    return __request(OpenAPI, {\n      method: \"POST\",\n      url: \"/api/v1/apikey/generate\",\n      query: {\n        name: name,\n      },\n    });\n  }\n\n  /**\n   * API Key List\n   * Return a list of API Keys for the team.\n   * @returns APIKeyResponse OK\n   * @throws ApiError\n   */\n  public static apikeyList(): CancelablePromise<Array<APIKeyResponse>> {\n    return __request(OpenAPI, {\n      method: \"GET\",\n      url: \"/api/v1/apikey/list\",\n      errors: {\n        500: `Internal Server Error`,\n      },\n    });\n  }\n\n  /**\n   * Delete API Key\n   * Mark the specified API Key as deleted.\n   * @param apikeyId\n   * @returns ActionResponse OK\n   * @throws ApiError\n   */\n  public static apikeyDelete(\n    apikeyId: string,\n  ): CancelablePromise<ActionResponse> {\n    return __request(OpenAPI, {\n      method: \"DELETE\",\n      url: \"/api/v1/apikey/{apikey_id}/delete\",\n      path: {\n        apikey_id: apikeyId,\n      },\n      errors: {\n        404: `Not Found`,\n        500: `Internal Server Error`,\n      },\n    });\n  }\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport { FormData } from \"lib/isomorphic\"; // DO NOT REMOVE OR CHANGE THIS, MANUAL EDIT!!!\n\nimport type { ActionResponse } from \"../models/ActionResponse\";\nimport type { CircomCircuitInfoResponse } from \"../models/CircomCircuitInfoResponse\";\nimport type { GnarkCircuitInfoResponse } from \"../models/GnarkCircuitInfoResponse\";\nimport type { Halo2CircuitInfoResponse } from \"../models/Halo2CircuitInfoResponse\";\nimport type { NoirCircuitInfoResponse } from \"../models/NoirCircuitInfoResponse\";\nimport type { ProofInfoResponse } from \"../models/ProofInfoResponse\";\n\nimport type { CancelablePromise } from \"../core/CancelablePromise\";\nimport { OpenAPI } from \"../core/OpenAPI\";\nimport { request as __request } from \"../core/request\";\n\nexport class CircuitsService {\n  /**\n   * Create Circuit\n   * Create a circuit.\n   * @param formData\n   * @returns any Created\n   * @throws ApiError\n   */\n  public static circuitCreate(\n    formData: // This is a manual edit to allow `FormData` to be passed in directly:\n    | FormData // DO NOT REMOVE THIS!\n      | {\n          files: Array<Blob>;\n          /**\n           * Tags for a circuit.\n           */\n          tags?: Array<string>;\n        },\n  ): CancelablePromise<\n    | CircomCircuitInfoResponse\n    | Halo2CircuitInfoResponse\n    | GnarkCircuitInfoResponse\n    | NoirCircuitInfoResponse\n  > {\n    return __request(OpenAPI, {\n      method: \"POST\",\n      url: \"/api/v1/circuit/create\",\n      formData: formData,\n      mediaType: \"multipart/form-data\",\n      errors: {\n        412: `Precondition Failed`,\n        422: `Unprocessable Entity`,\n        500: `Internal Server Error`,\n        501: `Not Implemented`,\n      },\n    });\n  }\n\n  /**\n   * Circuit List\n   * Return a list of CircuitInfoResponse for circuits related to user.\n   * @param includeVerificationKey\n   * @returns any OK\n   * @throws ApiError\n   */\n  public static circuitList(\n    includeVerificationKey: boolean = false,\n  ): CancelablePromise<\n    Array<\n      | CircomCircuitInfoResponse\n      | Halo2CircuitInfoResponse\n      | GnarkCircuitInfoResponse\n      | NoirCircuitInfoResponse\n    >\n  > {\n    return __request(OpenAPI, {\n      method: \"GET\",\n      url: \"/api/v1/circuit/list\",\n      query: {\n        include_verification_key: includeVerificationKey,\n      },\n      errors: {\n        500: `Internal Server Error`,\n      },\n    });\n  }\n\n  /**\n   * Circuit Detail\n   * Get info for existing circuit\n   * @param circuitId\n   * @param includeVerificationKey\n   * @returns any OK\n   * @throws ApiError\n   */\n  public static circuitDetail(\n    circuitId: string,\n    includeVerificationKey: boolean = true,\n  ): CancelablePromise<\n    | CircomCircuitInfoResponse\n    | Halo2CircuitInfoResponse\n    | GnarkCircuitInfoResponse\n    | NoirCircuitInfoResponse\n  > {\n    return __request(OpenAPI, {\n      method: \"GET\",\n      url: \"/api/v1/circuit/{circuit_id}/detail\",\n      path: {\n        circuit_id: circuitId,\n      },\n      query: {\n        include_verification_key: includeVerificationKey,\n      },\n      errors: {\n        404: `Not Found`,\n        500: `Internal Server Error`,\n      },\n    });\n  }\n\n  /**\n   * Delete Circuit\n   * Mark the specified circuit and any related proofs as deleted.\n   * @param circuitId\n   * @returns ActionResponse OK\n   * @throws ApiError\n   */\n  public static circuitDelete(\n    circuitId: string,\n  ): CancelablePromise<ActionResponse> {\n    return __request(OpenAPI, {\n      method: \"DELETE\",\n      url: \"/api/v1/circuit/{circuit_id}/delete\",\n      path: {\n        circuit_id: circuitId,\n      },\n      errors: {\n        404: `Not Found`,\n        500: `Internal Server Error`,\n      },\n    });\n  }\n\n  /**\n   * Circuit Proofs\n   * Return list of ProofInfoResponse for proofs of circuit_id related to team.\n   * @param circuitId\n   * @param includeProofInput\n   * @param includeProof\n   * @param includePublic\n   * @param includeVerificationKey\n   * @returns ProofInfoResponse OK\n   * @throws ApiError\n   */\n  public static circuitProofs(\n    circuitId: string,\n    includeProofInput: boolean = false,\n    includeProof: boolean = false,\n    includePublic: boolean = false,\n    includeVerificationKey: boolean = false,\n  ): CancelablePromise<Array<ProofInfoResponse>> {\n    return __request(OpenAPI, {\n      method: \"GET\",\n      url: \"/api/v1/circuit/{circuit_id}/proofs\",\n      path: {\n        circuit_id: circuitId,\n      },\n      query: {\n        include_proof_input: includeProofInput,\n        include_proof: includeProof,\n        include_public: includePublic,\n        include_verification_key: includeVerificationKey,\n      },\n      errors: {\n        404: `Not Found`,\n        500: `Internal Server Error`,\n      },\n    });\n  }\n\n  /**\n   * Create Proof for Circuit\n   * Prove a circuit with specific inputs.\n   * @param circuitId\n   * @param formData\n   * @returns ProofInfoResponse Created\n   * @throws ApiError\n   */\n  public static proofCreate(\n    circuitId: string,\n    formData: {\n      /**\n       * JSON-serialized string for the proof input.\n       */\n      proof_input: string;\n      /**\n       * Perform an internal verification on the resulting proof.\n       */\n      perform_verify?: boolean;\n      /**\n       * Internal prover implementation setting.\n       */\n      prover_implementation?: string;\n    },\n  ): CancelablePromise<ProofInfoResponse> {\n    return __request(OpenAPI, {\n      method: \"POST\",\n      url: \"/api/v1/circuit/{circuit_id}/prove\",\n      path: {\n        circuit_id: circuitId,\n      },\n      formData: formData,\n      mediaType: \"application/x-www-form-urlencoded\",\n      errors: {\n        404: `Not Found`,\n        412: `Precondition Failed`,\n        501: `Not Implemented`,\n      },\n    });\n  }\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ActionResponse } from \"../models/ActionResponse\";\nimport type { TeamMeResponse } from \"../models/TeamMeResponse\";\nimport type { UserMeResponse } from \"../models/UserMeResponse\";\n\nimport type { CancelablePromise } from \"../core/CancelablePromise\";\nimport { OpenAPI } from \"../core/OpenAPI\";\nimport { request as __request } from \"../core/request\";\n\nexport class InternalService {\n  /**\n   * Change user password (requires JWT authentication)\n   * Change password for a user.\n   *\n   * This endpoint requires JWT authentication in order\n   * to know which user is making the request. It expects to receive\n   * an authenticated user in `request.auth`.\n   *\n   * We subsequently verify the old password and then update the user's password.\n   * @param formData\n   * @returns ActionResponse OK\n   * @throws ApiError\n   */\n  public static passwordChangeWithJwtAuth(formData: {\n    /**\n     * Old password.\n     */\n    old_password: string;\n    /**\n     * New password.\n     */\n    new_password: string;\n  }): CancelablePromise<ActionResponse> {\n    return __request(OpenAPI, {\n      method: \"POST\",\n      url: \"/api/v1/password/change\",\n      formData: formData,\n      mediaType: \"application/x-www-form-urlencoded\",\n      errors: {\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * Return the JSON schema for `sindri.json` manifest files\n   * Return the JSON schema for `sindri.json` manifest files\n   * @returns any OK\n   * @throws ApiError\n   */\n  public static sindriManifestSchema(): CancelablePromise<Record<string, any>> {\n    return __request(OpenAPI, {\n      method: \"GET\",\n      url: \"/api/v1/sindri-manifest-schema.json\",\n    });\n  }\n\n  /**\n   * Obtain team details for the currently authenticated team\n   * Return details about the currently authenticated team.\n   * @returns TeamMeResponse OK\n   * @throws ApiError\n   */\n  public static teamMe(): CancelablePromise<TeamMeResponse> {\n    return __request(OpenAPI, {\n      method: \"GET\",\n      url: \"/api/v1/team/me\",\n    });\n  }\n\n  /**\n   * Obtain user details (requires JWT authentication)\n   * Return details about the user and their teams.\n   *\n   * This endpoint requires JWT authentication in order\n   * to know which user is making the request. It expects to receive\n   * an authenticated user in `request.auth`.\n   * @returns UserMeResponse OK\n   * @throws ApiError\n   */\n  public static userMeWithJwtAuth(): CancelablePromise<UserMeResponse> {\n    return __request(OpenAPI, {\n      method: \"GET\",\n      url: \"/api/v1/user/me\",\n    });\n  }\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ActionResponse } from \"../models/ActionResponse\";\nimport type { ProofInfoResponse } from \"../models/ProofInfoResponse\";\n\nimport type { CancelablePromise } from \"../core/CancelablePromise\";\nimport { OpenAPI } from \"../core/OpenAPI\";\nimport { request as __request } from \"../core/request\";\n\nexport class ProofsService {\n  /**\n   * Proof List\n   * Return list of ProofInfoResponse for proofs related to team.\n   * @param includeProofInput\n   * @param includeProof\n   * @param includePublic\n   * @param includeVerificationKey\n   * @returns ProofInfoResponse OK\n   * @throws ApiError\n   */\n  public static proofList(\n    includeProofInput: boolean = false,\n    includeProof: boolean = false,\n    includePublic: boolean = false,\n    includeVerificationKey: boolean = false,\n  ): CancelablePromise<Array<ProofInfoResponse>> {\n    return __request(OpenAPI, {\n      method: \"GET\",\n      url: \"/api/v1/proof/list\",\n      query: {\n        include_proof_input: includeProofInput,\n        include_proof: includeProof,\n        include_public: includePublic,\n        include_verification_key: includeVerificationKey,\n      },\n      errors: {\n        500: `Internal Server Error`,\n      },\n    });\n  }\n\n  /**\n   * Proof Detail\n   * Get info for existing proof\n   * @param proofId\n   * @param includeProofInput\n   * @param includeProof\n   * @param includePublic\n   * @param includeVerificationKey\n   * @returns ProofInfoResponse OK\n   * @throws ApiError\n   */\n  public static proofDetail(\n    proofId: string,\n    includeProofInput: boolean = true,\n    includeProof: boolean = true,\n    includePublic: boolean = true,\n    includeVerificationKey: boolean = true,\n  ): CancelablePromise<ProofInfoResponse> {\n    return __request(OpenAPI, {\n      method: \"GET\",\n      url: \"/api/v1/proof/{proof_id}/detail\",\n      path: {\n        proof_id: proofId,\n      },\n      query: {\n        include_proof_input: includeProofInput,\n        include_proof: includeProof,\n        include_public: includePublic,\n        include_verification_key: includeVerificationKey,\n      },\n      errors: {\n        404: `Not Found`,\n        500: `Internal Server Error`,\n      },\n    });\n  }\n\n  /**\n   * Delete Proof\n   * Mark the specified proof as deleted.\n   * @param proofId\n   * @returns ActionResponse OK\n   * @throws ApiError\n   */\n  public static proofDelete(\n    proofId: string,\n  ): CancelablePromise<ActionResponse> {\n    return __request(OpenAPI, {\n      method: \"DELETE\",\n      url: \"/api/v1/proof/{proof_id}/delete\",\n      path: {\n        proof_id: proofId,\n      },\n      errors: {\n        404: `Not Found`,\n        500: `Internal Server Error`,\n      },\n    });\n  }\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { Schema } from \"../models/Schema\";\nimport type { TokenObtainPairInputSchema } from \"../models/TokenObtainPairInputSchema\";\nimport type { TokenObtainPairOutputSchema } from \"../models/TokenObtainPairOutputSchema\";\nimport type { TokenRefreshInputSchema } from \"../models/TokenRefreshInputSchema\";\nimport type { TokenRefreshOutputSchema } from \"../models/TokenRefreshOutputSchema\";\nimport type { TokenVerifyInputSchema } from \"../models/TokenVerifyInputSchema\";\n\nimport type { CancelablePromise } from \"../core/CancelablePromise\";\nimport { OpenAPI } from \"../core/OpenAPI\";\nimport { request as __request } from \"../core/request\";\n\nexport class TokenService {\n  /**\n   * Obtain Token\n   * @param requestBody\n   * @returns TokenObtainPairOutputSchema OK\n   * @throws ApiError\n   */\n  public static bf740E1AControllerObtainToken(\n    requestBody: TokenObtainPairInputSchema,\n  ): CancelablePromise<TokenObtainPairOutputSchema> {\n    return __request(OpenAPI, {\n      method: \"POST\",\n      url: \"/api/token/pair\",\n      body: requestBody,\n      mediaType: \"application/json\",\n    });\n  }\n\n  /**\n   * Refresh Token\n   * @param requestBody\n   * @returns TokenRefreshOutputSchema OK\n   * @throws ApiError\n   */\n  public static db93F15ControllerRefreshToken(\n    requestBody: TokenRefreshInputSchema,\n  ): CancelablePromise<TokenRefreshOutputSchema> {\n    return __request(OpenAPI, {\n      method: \"POST\",\n      url: \"/api/token/refresh\",\n      body: requestBody,\n      mediaType: \"application/json\",\n    });\n  }\n\n  /**\n   * Verify Token\n   * @param requestBody\n   * @returns Schema OK\n   * @throws ApiError\n   */\n  public static abc17FbControllerVerifyToken(\n    requestBody: TokenVerifyInputSchema,\n  ): CancelablePromise<Schema> {\n    return __request(OpenAPI, {\n      method: \"POST\",\n      url: \"/api/token/verify\",\n      body: requestBody,\n      mediaType: \"application/json\",\n    });\n  }\n}\n","import pino from \"pino\";\nimport pretty from \"pino-pretty\";\n\n/**\n * The minimum log level to print.\n */\nexport type LogLevel =\n  | \"silent\"\n  | \"fatal\"\n  | \"error\"\n  | \"warn\"\n  | \"info\"\n  | \"debug\"\n  | \"trace\";\n\nexport const logger = pino(\n  process.env.BROWSER_BUILD\n    ? {\n        browser: { asObject: true },\n      }\n    : pretty({\n        colorize: true,\n        destination: 2,\n        ignore: \"hostname,pid\",\n        levelFirst: false,\n        sync: true,\n      }),\n);\n\nlogger.level = process.env.NODE_ENV === \"production\" ? \"silent\" : \"info\";\n\nexport const print = console.log;\n","import { execSync } from \"child_process\";\nimport { existsSync, mkdirSync, readdirSync, rmSync, statSync } from \"fs\";\nimport path from \"path\";\nimport process from \"process\";\n\nimport { Command } from \"@commander-js/extra-typings\";\nimport { confirm, input, select } from \"@inquirer/prompts\";\n\nimport { scaffoldDirectory } from \"cli/utils\";\nimport { logger } from \"lib/logging\";\n\nexport const initCommand = new Command()\n  .name(\"init\")\n  .description(\"Initialize a new Sindri project.\")\n  .argument(\n    \"[directory]\",\n    \"The directory where the new project should be initialized.\",\n    \".\",\n  )\n  .action(async (directory) => {\n    // Prepare the directory paths.\n    const directoryPath = path.resolve(directory);\n    const directoryName = path.basename(directoryPath);\n\n    // Ensure that the directory exists.\n    if (!existsSync(directoryPath)) {\n      mkdirSync(directoryPath, { recursive: true });\n    } else if (!statSync(directoryPath).isDirectory()) {\n      logger.warn(\n        `File \"${directoryPath}\" exists and is not a directory, aborting.`,\n      );\n      return process.exit(1);\n    }\n\n    // Check that the directory is empty.\n    const existingFiles = readdirSync(directoryPath);\n    if (existingFiles.length > 0) {\n      const proceed = await confirm({\n        message:\n          `The \"${directoryPath}\" directory already exists and contains files. Continuing will ` +\n          \"overwrite your existing files. Are you *SURE* you would like to proceed?\",\n        default: false,\n      });\n      if (!proceed) {\n        logger.info(\"Aborting.\");\n        return process.exit(1);\n      }\n    }\n\n    // Collect common fields.\n    const circuitName = await input({\n      message: \"Circuit Name:\",\n      default: directoryName.replace(/[^-a-zA-Z0-9_]/g, \"-\"),\n      validate: (input): boolean | string => {\n        if (input.length === 0) {\n          return \"You must specify a circuit name.\";\n        }\n        if (!/^[-a-zA-Z0-9_]+$/.test(input)) {\n          return \"Only alphanumeric characters, hyphens, and underscores are allowed.\";\n        }\n        return true;\n      },\n    });\n    const circuitType: \"circom\" | \"gnark\" | \"halo2\" | \"noir\" = await select({\n      message: \"Proving Framework:\",\n      default: \"circom\",\n      choices: [\n        { name: \"Circom\", value: \"circom\" },\n        { name: \"Gnark\", value: \"gnark\" },\n        { name: \"Halo2\", value: \"halo2\" },\n        { name: \"Noir\", value: \"noir\" },\n      ],\n    });\n    const context: object = { circuitName, circuitType };\n\n    // Handle individual circuit types.\n    if (circuitType === \"circom\") {\n      // Circom.\n      const provingScheme: \"groth16\" = await select({\n        message: \"Proving Scheme:\",\n        default: \"groth16\",\n        choices: [{ name: \"Groth16\", value: \"groth16\" }],\n      });\n      const curveName: \"bn254\" = await select({\n        message: \"Curve Name:\",\n        default: \"bn254\",\n        choices: [{ name: \"BN254\", value: \"bn254\" }],\n      });\n      const witnessCompiler: \"c++\" | \"wasm\" = await select({\n        message: \"Witness Compiler:\",\n        default: \"c++\",\n        choices: [\n          { name: \"C++\", value: \"c++\" },\n          { name: \"Wasm\", value: \"wasm\" },\n        ],\n      });\n      Object.assign(context, {\n        curveName,\n        provingScheme,\n        witnessCompiler,\n      });\n    } else if (circuitType === \"gnark\") {\n      // Gnark.\n      const packageName = await input({\n        message: \"Go Package Name:\",\n        default: circuitName\n          .replace(/[^a-zA-Z0-9]/g, \"\")\n          .replace(/^[^a-z]*/g, \"\"),\n        validate: (input): boolean | string => {\n          if (input.length === 0) {\n            return \"You must specify a package name.\";\n          }\n          if (!/^[a-z][a-z0-9]*$/.test(input)) {\n            return (\n              \"Package names must begin with a lowercase letter and only be followed by \" +\n              \"alphanumeric characters.\"\n            );\n          }\n          return true;\n        },\n      });\n      const provingScheme: \"groth16\" = await select({\n        message: \"Proving Scheme:\",\n        default: \"groth16\",\n        choices: [{ name: \"Groth16\", value: \"groth16\" }],\n      });\n      const curveName:\n        | \"bn254\"\n        | \"bls12-377\"\n        | \"bls12-381\"\n        | \"bls24-315\"\n        | \"bw6-633\"\n        | \"bw6-761\" = await select({\n        message: \"Curve Name:\",\n        default: \"bn254\",\n        choices: [\n          { name: \"BN254\", value: \"bn254\" },\n          { name: \"BLS12-377\", value: \"bls12-377\" },\n          { name: \"BLS12-381\", value: \"bls12-381\" },\n          { name: \"BLS24-315\", value: \"bls24-315\" },\n          { name: \"BW6-633\", value: \"bw6-633\" },\n          { name: \"BW6-761\", value: \"bw6-761\" },\n        ],\n      });\n      const gnarkCurveName = curveName.toUpperCase().replace(\"-\", \"_\");\n      Object.assign(context, {\n        curveName,\n        gnarkCurveName,\n        packageName,\n        provingScheme,\n      });\n    } else if (circuitType === \"halo2\") {\n      // Halo2.\n      const packageName = await input({\n        message: \"Halo2 Package Name:\",\n        default: circuitName\n          .toLowerCase()\n          .replace(/^[^a-z0-9_]+/, \"_\")\n          .replace(/_+/g, \"_\")\n          .replace(/-+/g, \"-\"),\n        validate: (input): boolean | string => {\n          if (input.length === 0) {\n            return \"You must specify a package name.\";\n          }\n          if (!/^[a-z0-9_]+(?:-[a-z0-9_]+)*$/.test(input)) {\n            return (\n              \"Package names must begin with a lowercase letter, number, or underscore, and only \" +\n              \"be followed by lowercase or numeric characters and underscores (optionally \" +\n              \"separated hyphens).\"\n            );\n          }\n          return true;\n        },\n      });\n      const halo2Version: \"axiom-v0.3.0\" = await select({\n        message: \"Halo2 Base Version:\",\n        default: \"axiom-v0.3.0\",\n        choices: [{ name: \"Axiom v0.3.0\", value: \"axiom-v0.3.0\" }],\n      });\n      const threadBuilder: \"GateThreadBuilder\" | undefined =\n        halo2Version !== \"axiom-v0.3.0\"\n          ? undefined\n          : await select({\n              message: \"Halo2 Base Version:\",\n              default: \"GateThreadBuilder\",\n              choices: [\n                { name: \"Gate Thread Builder\", value: \"GateThreadBuilder\" },\n              ],\n            });\n      // Collect `degree` as a positive integer.\n      const degree: number = parseInt(\n        await input({\n          message: \"Degree:\",\n          default: \"13\",\n          validate: (input): boolean | string => {\n            if (input.length === 0) {\n              return \"You must specify a degree.\";\n            }\n            if (!/^[1-9]\\d*$/.test(input)) {\n              return \"Degree must be a positive integer.\";\n            }\n            return true;\n          },\n        }),\n        10,\n      );\n\n      // Replace hyphens with underscores in the package name.\n      const className = `${packageName.replace(\n        /-/g,\n        \"_\",\n      )}::circuit_def::CircuitInput`;\n\n      Object.assign(context, {\n        className,\n        halo2Version,\n        degree,\n        packageName,\n        threadBuilder,\n      });\n    } else if (circuitType === \"noir\") {\n      const packageName = await input({\n        message: \"Noir Package Name:\",\n        default: circuitName\n          .toLowerCase()\n          .replace(/[- ]/g, \"_\")\n          .replace(/[^a-zA-Z0-9_]+/, \"\")\n          .replace(/_+/g, \"_\"),\n        validate: (input): boolean | string => {\n          if (input.length === 0) {\n            return \"You must specify a package name.\";\n          }\n          if (!/^[a-zA-Z0-9_]+$/.test(input)) {\n            return \"Package names must only contain alphanumeric characters and underscores.\";\n          }\n          return true;\n        },\n      });\n      const noirVersion: \"0.17.0\" | \"0.18.0\" | \"0.19.4\" | \"0.22.0\" | \"0.23.0\" =\n        await select({\n          message: \"Noir Version:\",\n          default: \"0.23.0\",\n          choices: [\n            { name: \"0.17.0\", value: \"0.17.0\" },\n            { name: \"0.18.0\", value: \"0.18.0\" },\n            { name: \"0.19.4\", value: \"0.19.4\" },\n            { name: \"0.22.0\", value: \"0.22.0\" },\n            { name: \"0.23.0\", value: \"0.23.0\" },\n          ],\n        });\n      const provingScheme: \"barretenberg\" = await select({\n        message: \"Proving Scheme:\",\n        default: \"barretenberg\",\n        choices: [{ name: \"Barretenberg\", value: \"barretenberg\" }],\n      });\n      Object.assign(context, {\n        packageName,\n        noirVersion,\n        provingScheme,\n      });\n    } else {\n      logger.fatal(`Sorry, ${circuitType} is not yet supported.`);\n      return process.exit(1);\n    }\n\n    // Perform the scaffolding.\n    logger.info(\n      `Proceeding to generate scaffolded project in \"${directoryPath}\".`,\n    );\n    await scaffoldDirectory(\"common\", directoryPath, context);\n    await scaffoldDirectory(circuitType, directoryPath, context);\n    // We use this in `common` right now to keep the directory tracked, we can remove this once we\n    // add files there.\n    const gitKeepFile = path.join(directoryPath, \".gitkeep\");\n    if (existsSync(gitKeepFile)) {\n      rmSync(gitKeepFile);\n    }\n    logger.info(\"Project scaffolding successful.\");\n\n    // Install dependencies.\n    if (circuitType === \"circom\") {\n      let npmInstalled: boolean = false;\n      try {\n        execSync(\"npm --version\");\n        npmInstalled = true;\n      } catch {\n        logger.warn(\n          \"NPM is not installed, cannot install circomlib as a dependency. \" +\n            \"You will need to install NPM and run `npm install` yourself.\",\n        );\n      }\n      if (npmInstalled) {\n        logger.info(\"Installing circomlib.\");\n        execSync(\"npm install\", { cwd: directoryPath });\n      }\n    }\n\n    // Optionally, initialize a git repository.\n    let gitInstalled: boolean = false;\n    try {\n      execSync(\"git --version\");\n      gitInstalled = true;\n    } catch {\n      logger.debug(\n        \"Git is not installed, skipping git initialization questions.\",\n      );\n    }\n    const gitAlreadyInitialized = existsSync(path.join(directoryPath, \".git\"));\n    if (gitInstalled && !gitAlreadyInitialized) {\n      const initializeGit = await confirm({\n        message: `Would you like to initialize a git repository in \"${directoryPath}\"?`,\n        default: true,\n      });\n      if (initializeGit) {\n        logger.info(`Initializing git repository in \"${directoryPath}\".`);\n        try {\n          execSync(\"git init .\", { cwd: directoryPath });\n          execSync(\"git add .\", { cwd: directoryPath });\n          execSync(\"git commit -m 'Initial commit.'\", { cwd: directoryPath });\n          logger.info(\"Successfully initialized git repository.\");\n        } catch (error) {\n          logger.error(\"Error occurred while initializing the git repository.\");\n          // Node.js doesn't seem to have a typed version of this error, so we assert it as\n          // something that's at least in the right ballpark.\n          const execError = error as NodeJS.ErrnoException & {\n            output: Buffer | string;\n            stderr: Buffer | string;\n            stdout: Buffer | string;\n          };\n          // The output is a really long list of numbers because it's a buffer, so truncate it.\n          const noisyKeys: Array<\"output\" | \"stderr\" | \"stdout\"> = [\n            \"output\",\n            \"stderr\",\n            \"stdout\",\n          ];\n          noisyKeys.forEach((key) => {\n            if (key in execError) {\n              execError[key] = \"<truncated>\";\n            }\n          });\n          logger.error(execError);\n        }\n      }\n    }\n  });\n","import { constants as fsConstants, readdirSync, readFileSync } from \"fs\";\nimport { access, mkdir, readdir, readFile, stat, writeFile } from \"fs/promises\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nimport type { Schema } from \"jsonschema\";\nimport nunjucks from \"nunjucks\";\nimport type { PackageJson } from \"type-fest\";\n\nimport { logger } from \"lib/logging\";\n\nconst currentFilePath = fileURLToPath(import.meta.url);\nconst currentDirectoryPath = path.dirname(currentFilePath);\n\n/**\n * Checks whether or not a file (including directories) exists.\n *\n * @param filePath - The path of the file to check.\n * @returns A boolean value indicating whether the file path exists.\n */\nexport async function fileExists(filePath: string): Promise<boolean> {\n  try {\n    await access(filePath, fsConstants.F_OK);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Recursively searches for a file in the given directory and its parent directories.\n *\n * @param filename - The name or regular expression of the file to find.\n * @param initialDirectory - The directory to start the search in.\n * @returns The fully qualified path of the first file found, or `null` if none is found.\n */\nexport function findFileUpwards(\n  filename: string | RegExp,\n  initialDirectory: string = currentDirectoryPath,\n): string | null {\n  // List files in the current directory.\n  const files = readdirSync(initialDirectory);\n\n  // Check if any file matches the filename.\n  for (const file of files) {\n    if (\n      typeof filename === \"string\" ? file === filename : filename.test(file)\n    ) {\n      return path.join(initialDirectory, file);\n    }\n  }\n\n  // If the parent directory is the same as the current, we've reached the root.\n  const parentDirectory = path.dirname(initialDirectory);\n  if (parentDirectory === initialDirectory) {\n    return null;\n  }\n\n  // Recursively search in the parent directory.\n  return findFileUpwards(filename, parentDirectory);\n}\n\n/**\n * Loads the project's `package.json` file.\n *\n * @returns The contents of `package.json`.\n */\nexport function loadPackageJson(): PackageJson {\n  const packageJsonPath = locatePackageJson();\n  const packageJsonContent = readFileSync(packageJsonPath, {\n    encoding: \"utf-8\",\n  });\n  const packageJson: PackageJson = JSON.parse(packageJsonContent);\n  return packageJson;\n}\n\n/**\n * Loads the project's `sindri-manifest.json` file.\n *\n * @returns The contents of `sindri-manifest.json`.\n */\nexport function loadSindriManifestJsonSchema(): Schema {\n  const sindriManifestJsonPath = findFileUpwards(\"sindri-manifest.json\");\n  if (!sindriManifestJsonPath) {\n    throw new Error(\n      \"A `sindri-manifest.json` file was unexpectedly not found.\",\n    );\n  }\n  const sindriManifestJsonContent = readFileSync(sindriManifestJsonPath, {\n    encoding: \"utf-8\",\n  });\n  const sindriManifestJson: Schema = JSON.parse(sindriManifestJsonContent);\n  return sindriManifestJson;\n}\n\n/**\n * Locates the project's `package.json` file.\n *\n * @returns The fully qualified path to `package.json`.\n */\nexport function locatePackageJson(): string {\n  const packageJsonPath = findFileUpwards(\"package.json\");\n  if (!packageJsonPath) {\n    throw new Error(\"A `package.json` file was unexpectedly not found.\");\n  }\n  return packageJsonPath;\n}\n\n/**\n * Recursively copies and populates the contents of a template directory into an output directory.\n *\n * @param templateDirectory - The path to the template directory. Can be an absolute path or a\n *     subdirectory of the `templates/` directory in the project root.\n * @param outputDirectory - The path to the output directory where the populated templates will be\n *     written.\n * @param context - The nunjucks template context.\n */\nexport async function scaffoldDirectory(\n  templateDirectory: string,\n  outputDirectory: string,\n  context: object,\n): Promise<void> {\n  // Normalize the paths and create the output directory if necessary.\n  const fullOutputDirectory = path.resolve(outputDirectory);\n  if (!(await fileExists(fullOutputDirectory))) {\n    await mkdir(fullOutputDirectory, { recursive: true });\n  }\n  const rootTemplateDirectory = findFileUpwards(\"templates\");\n  if (!rootTemplateDirectory) {\n    throw new Error(\"Root template directory not found.\");\n  }\n  const fullTemplateDirectory = path.isAbsolute(templateDirectory)\n    ? templateDirectory\n    : path.resolve(rootTemplateDirectory, templateDirectory);\n  if (!(await fileExists(fullTemplateDirectory))) {\n    throw new Error(`The \"${fullTemplateDirectory}\" directory does not exist.`);\n  }\n\n  // Render a template using two syntaxes:\n  // * hacky `templateVARIABLENAME` syntax.\n  // * `nunjucks` template syntax.\n  const render = (content: string, context: object): string => {\n    let newContent = content;\n    // Poor man's templating with `templateVARIABLENAME`:\n    Object.entries(context).forEach(([key, value]) => {\n      if (typeof value !== \"string\") return;\n      newContent = newContent.replace(\n        new RegExp(`template${key.toUpperCase()}`, \"gi\"),\n        value,\n      );\n    });\n    // Real templating:\n    return nunjucks.renderString(newContent, context);\n  };\n\n  // Process the template directory recursively.\n  const processPath = async (\n    inputPath: string,\n    outputPath: string,\n  ): Promise<void> => {\n    // Handle directories.\n    if ((await stat(inputPath)).isDirectory()) {\n      // Ensure the output directory exists.\n      if (!(await fileExists(outputPath))) {\n        await mkdir(outputPath, { recursive: true });\n        logger.debug(`Created directory: \"${outputPath}\"`);\n      }\n      if (!(await stat(outputPath)).isDirectory()) {\n        throw new Error(`\"File ${outputPath} exists and is not a directory.`);\n      }\n\n      // Process all files in the directory.\n      const files = await readdir(inputPath);\n      await Promise.all(\n        files.map(async (file) => {\n          // Render the filename so that `outputPath` always corresponds to the true output path.\n          // This handles situations like `{{ circuitName }}.go` where there's a variable in the name.\n          const populatedFile = render(file, context);\n          await processPath(\n            path.join(inputPath, file),\n            path.join(outputPath, populatedFile),\n          );\n        }),\n      );\n      return;\n    }\n\n    // Handle files, rendering them and writing them out.\n    const template = await readFile(inputPath, { encoding: \"utf-8\" });\n    const renderedTemplate = render(template, context);\n    await writeFile(outputPath, renderedTemplate, { encoding: \"utf-8\" });\n    logger.debug(`Rendered \"${inputPath}\" template to \"${outputPath}\".`);\n  };\n  await processPath(fullTemplateDirectory, fullOutputDirectory);\n}\n","import { Blob } from \"buffer\";\nimport { existsSync, readFileSync } from \"fs\";\nimport path from \"path\";\nimport process from \"process\";\n\nimport { Command } from \"@commander-js/extra-typings\";\nimport { FormData } from \"formdata-node\";\nimport walk from \"ignore-walk\";\nimport tar from \"tar\";\n\nimport { findFileUpwards } from \"cli/utils\";\nimport { ApiError, CircuitsService, CircuitStatus, OpenAPI } from \"lib/api\";\nimport { logger } from \"lib/logging\";\n\nexport const deployCommand = new Command()\n  .name(\"deploy\")\n  .description(\"Deploy the current Sindri project.\")\n  .option(\"-t, --tag <tag...>\", \"Tag to apply to the circuit.\", [\"latest\"])\n  .option(\"-u, --untagged\", \"Discard the current circuit after compiling.\")\n  .argument(\"[directory]\", \"The location of the Sindri project to deploy.\", \".\")\n  .action(async (directory, { tag: tags, untagged }) => {\n    // Validate the tags and \"untagged\" option.\n    if (untagged) {\n      if (tags.length !== 1 || tags[0] !== \"latest\") {\n        logger.error(\n          \"You cannot use both the `--tag` and `--untagged` options together.\",\n        );\n        return process.exit(1);\n      }\n    } else {\n      for (const tag of tags) {\n        if (!/^[-a-zA-Z0-9_]+$/.test(tag)) {\n          logger.error(\n            `\"${tag}\" is not a valid tag. Tags may only contain alphanumeric characters, ` +\n              \"underscores, and hyphens.\",\n          );\n          return process.exit(1);\n        }\n      }\n    }\n\n    // Find `sindri.json` and move into the root of the project directory.\n    const directoryPath = path.resolve(directory);\n    if (!existsSync(directoryPath)) {\n      logger.error(\n        `The \"${directoryPath}\" directory does not exist. Aborting.`,\n      );\n      return process.exit(1);\n    }\n    const sindriJsonPath = findFileUpwards(/^sindri.json$/i, directoryPath);\n    if (!sindriJsonPath) {\n      logger.error(\n        `No \"sindri.json\" file was found in or above \"${directoryPath}\". Aborting.`,\n      );\n      return process.exit(1);\n    }\n    logger.debug(`Found \"sindri.json\" at \"${sindriJsonPath}\".`);\n    const rootDirectory = path.dirname(sindriJsonPath);\n    logger.debug(`Changing current directory to \"${rootDirectory}\".`);\n    process.chdir(rootDirectory);\n\n    // Load `sindri.json`.\n    let sindriJson: object = {};\n    try {\n      const sindriJsonContent = readFileSync(sindriJsonPath, {\n        encoding: \"utf-8\",\n      });\n      sindriJson = JSON.parse(sindriJsonContent);\n      logger.debug(\n        `Successfully loaded \"sindri.json\" from \"${sindriJsonPath}\":`,\n      );\n      logger.debug(sindriJson);\n    } catch (error) {\n      logger.fatal(\n        `Error loading \"${sindriJsonPath}\", perhaps it is not valid JSON?`,\n      );\n      logger.error(error);\n      return process.exit(1);\n    }\n    if (!(\"name\" in sindriJson)) {\n      logger.error('No \"name\" field found in \"sindri.json\". Aborting.');\n      return process.exit(1);\n    }\n    const circuitName = sindriJson.name;\n\n    // Check that the API client is authorized.\n    if (!OpenAPI.TOKEN || !OpenAPI.BASE) {\n      logger.warn(\"You must login first with `sindri login`.\");\n      return process.exit(1);\n    }\n\n    // Create a project tarball and prepare the form data for upload.\n    const files = walk\n      .sync({\n        follow: true,\n        ignoreFiles: [\".sindriignore\"],\n        path: \".\",\n      })\n      .filter(\n        (file) =>\n          // Always exclude `.git` subdirectories.\n          !/(^|\\/)\\.git(\\/|$)/.test(file),\n      );\n    // Always include the `sindri.json` file.\n    const sindriJsonFilename = path.basename(sindriJsonPath);\n    if (!files.includes(sindriJsonFilename)) {\n      files.push(sindriJsonFilename);\n    }\n    const formData = new FormData();\n    const tarballFilename = `${circuitName}.tar.gz`;\n    logger.info(\n      `Creating \"${tarballFilename}\" package with ${files.length} files.`,\n    );\n    formData.append(\n      \"files\",\n      new Blob([\n        tar\n          .c(\n            {\n              gzip: true,\n              onwarn: (code: string, message: string) => {\n                logger.warn(`While creating tarball: ${code} - ${message}`);\n              },\n              prefix: `${circuitName}/`,\n              sync: true,\n            },\n            files,\n          )\n          // @ts-expect-error - @types/tar doesn't handle the `sync` option correctly.\n          .read(),\n      ]),\n      tarballFilename,\n    );\n\n    // Attach the tags to the form data.\n    if (untagged) {\n      formData.append(\"tags\", \"\");\n    } else {\n      for (const tag of tags) {\n        formData.append(\"tags\", tag);\n      }\n    }\n\n    // Upload the tarball.\n    let circuitId: string | undefined;\n    try {\n      logger.info(\"Circuit compilation initiated.\");\n      const response = await CircuitsService.circuitCreate(formData);\n      circuitId = response.circuit_id;\n      logger.debug(\"/api/v1/circuit/create/ response:\");\n      logger.debug(response);\n    } catch (error) {\n      if (error instanceof ApiError && error.status === 401) {\n        logger.error(\n          \"Your credentials are invalid. Please log in again with `sindri login`.\",\n        );\n      } else {\n        logger.fatal(\"An unknown error occurred.\");\n        logger.error(error);\n        return process.exit(1);\n      }\n    }\n    if (!circuitId) {\n      logger.error(\"No circuit ID was returned from the API. Aborting.\");\n      return process.exit(1);\n    }\n\n    // Poll for circuit compilation to complete.\n    const startTime = Date.now();\n    let previousStatus: CircuitStatus | undefined;\n    while (true) {\n      try {\n        logger.debug(\"Polling for circuit compilation status.\");\n        const response = await CircuitsService.circuitDetail(circuitId, false);\n\n        // Only log this when the status changes because it's noisy.\n        if (previousStatus !== response.status) {\n          previousStatus = response.status;\n          logger.debug(`/api/v1/circuit/${circuitId}/detail/ response:`);\n          logger.debug(response);\n        }\n\n        const elapsedSeconds = ((Date.now() - startTime) / 1000).toFixed(1);\n        if (response.status === \"Ready\") {\n          logger.info(\n            `Circuit compiled successfully after ${elapsedSeconds} seconds.`,\n          );\n          break;\n        } else if (response.status === \"Failed\") {\n          logger.error(\n            `Circuit compilation failed after ${elapsedSeconds} seconds: ` +\n              (response.error ?? \"Unknown error.\"),\n          );\n          return process.exit(1);\n        } else if (response.status === \"Queued\") {\n          logger.debug(\"Circuit compilation is queued.\");\n        } else if (response.status === \"In Progress\") {\n          logger.debug(\"Circuit compilation is in progress.\");\n        }\n      } catch (error) {\n        logger.fatal(\n          \"An unknown error occurred while polling for compilation to finish.\",\n        );\n        logger.error(error);\n        return process.exit(1);\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n    }\n  });\n","import { existsSync, readFileSync } from \"fs\";\nimport path from \"path\";\nimport process from \"process\";\n\nimport { Command } from \"@commander-js/extra-typings\";\nimport type { Schema } from \"jsonschema\";\nimport { Validator as JsonValidator } from \"jsonschema\";\n\nimport { findFileUpwards, loadSindriManifestJsonSchema } from \"cli/utils\";\nimport { logger } from \"lib/logging\";\n\nexport const lintCommand = new Command()\n  .name(\"lint\")\n  .description(\"Lint the current Sindri project for potential issues.\")\n  .argument(\n    \"[directory]\",\n    \"The directory, or subdirectory, of the project to lint.\",\n    \".\",\n  )\n  .action(async (directory) => {\n    // Track the error and warning counts as we go.\n    let errorCount: number = 0;\n    let warningCount: number = 0;\n\n    // Load the Sindri Manifest JSON Schema.\n    let sindriManifestJsonSchema: Schema | undefined;\n    try {\n      sindriManifestJsonSchema = loadSindriManifestJsonSchema();\n      if (!sindriManifestJsonSchema) {\n        throw new Error('No \"sindri-manifest.json\" file found.');\n      }\n      logger.debug('Successfully loaded \"sindri-manifest.json\".');\n    } catch (error) {\n      logger.error(\n        'No \"sindri-manifest.json\" JSON Schema file found. Aborting.',\n      );\n      return process.exit(1);\n    }\n\n    // Find `sindri.json` and move into the root of the project directory.\n    const directoryPath = path.resolve(directory);\n    if (!existsSync(directoryPath)) {\n      logger.error(\n        `The \"${directoryPath}\" directory does not exist. Aborting.`,\n      );\n      return process.exit(1);\n    }\n    const sindriJsonPath = findFileUpwards(/^sindri.json$/i, directoryPath);\n    if (!sindriJsonPath) {\n      logger.error(\n        `No \"sindri.json\" file was found in or above \"${directoryPath}\". Aborting.`,\n      );\n      return process.exit(1);\n    }\n    logger.debug(`Found \"sindri.json\" at \"${sindriJsonPath}\".`);\n    const rootDirectory = path.dirname(sindriJsonPath);\n    logger.debug(`Changing current directory to \"${rootDirectory}\".`);\n    process.chdir(directoryPath);\n\n    // Load `sindri.json`.\n    let sindriJson: object = {};\n    try {\n      const sindriJsonContent = readFileSync(sindriJsonPath, {\n        encoding: \"utf-8\",\n      });\n      sindriJson = JSON.parse(sindriJsonContent);\n      logger.debug(\n        `Successfully loaded \"sindri.json\" from \"${sindriJsonPath}\":`,\n      );\n      logger.debug(sindriJson);\n    } catch (error) {\n      logger.fatal(\n        `Error loading \"${sindriJsonPath}\", perhaps it is not valid JSON?`,\n      );\n      logger.error(error);\n      return process.exit(1);\n    }\n\n    // Validate `sindri.json`.\n    const manifestValidator = new JsonValidator();\n    const validationStatus = manifestValidator.validate(\n      sindriJson,\n      sindriManifestJsonSchema,\n      { nestedErrors: true },\n    );\n    if (validationStatus.valid) {\n      logger.info(`Sindri manifest file \"${sindriJsonPath}\" is valid.`);\n    } else {\n      logger.warn(`Sindri manifest file \"${sindriJsonPath}\" contains errors:`);\n      for (const error of validationStatus.errors) {\n        const prefix =\n          error.property\n            .replace(/^instance/, \"sindri.json\")\n            .replace(/\\./g, \":\") +\n          (typeof error.schema === \"object\" && error.schema.title\n            ? `:${error.schema.title}`\n            : \"\");\n        logger.error(`${prefix} ${error.message}`);\n        errorCount += 1;\n      }\n    }\n\n    // Check for a project README.\n    const readmePath = path.join(rootDirectory, \"README.md\");\n    if (!existsSync(readmePath)) {\n      logger.warn(\n        `No project README was found at \"${readmePath}\", consider adding one.`,\n      );\n      warningCount += 1;\n    } else {\n      logger.debug(`README file found at \"${readmePath}\".`);\n    }\n\n    // Summarize the errors and warnings.\n    if (errorCount === 0 && warningCount === 0) {\n      logger.info(\"No issues found, good job!\");\n    } else {\n      logger.warn(\n        `Found ${errorCount + warningCount} problems ` +\n          `(${errorCount} errors, ${warningCount} warnings).`,\n      );\n      if (errorCount > 0) {\n        logger.error(`Linting failed with ${errorCount} errors.`);\n        return process.exit(1);\n      }\n    }\n  });\n","import os from \"os\";\nimport process from \"process\";\n\nimport { Command } from \"@commander-js/extra-typings\";\nimport {\n  confirm,\n  input,\n  password as passwordInput,\n  select,\n} from \"@inquirer/prompts\";\n\nimport {\n  ApiError,\n  AuthorizationService,\n  InternalService,\n  OpenAPI,\n  TokenService,\n} from \"lib/api\";\nimport { Config } from \"lib/config\";\nimport { logger } from \"lib/logging\";\n\nexport const loginCommand = new Command()\n  .name(\"login\")\n  .description(\"Authorize the client.\")\n  .option(\n    \"-u, --base-url <URL>\",\n    \"The base URL for the Sindri API. Mainly useful for development.\",\n    OpenAPI.BASE,\n  )\n  .action(async ({ baseUrl }) => {\n    // Check if they're already authenticated, and prompt for confirmation if so.\n    const config = new Config();\n    const auth = config.auth;\n    if (auth) {\n      let authenticated: boolean = false;\n      try {\n        const teamMeResult = await InternalService.teamMe();\n        logger.debug(\"/api/v1/team/me/ response:\");\n        logger.debug(teamMeResult);\n        authenticated = true;\n      } catch (error) {\n        if (error instanceof ApiError && error.status === 401) {\n          logger.warn(\n            \"Existing credentials found, but invalid. Please continue logging in to update them.\",\n          );\n        } else {\n          logger.fatal(\"An unknown error occurred.\");\n          logger.error(error);\n          return process.exit(1);\n        }\n      }\n\n      if (authenticated) {\n        const proceed = await confirm({\n          message:\n            `You are already logged in as ${auth.teamSlug} on ${auth.baseUrl}, ` +\n            \"are you sure you want to proceed?\",\n          default: false,\n        });\n        if (!proceed) {\n          logger.info(\"Aborting.\");\n          return;\n        }\n      }\n    }\n\n    // Collect details for generating an API key.\n    const username = await input({ message: \"Username:\" });\n    const password = await passwordInput({ mask: true, message: \"Password:\" });\n    const name = await input({\n      default: `${os.hostname()}-sdk`,\n      message: \"New API Key Name:\",\n    });\n\n    // Generate an API key for one of their teams.\n    try {\n      // Generate a JWT token to authenticate the user.\n      OpenAPI.BASE = baseUrl;\n      const tokenResult = await TokenService.bf740E1AControllerObtainToken({\n        username,\n        password,\n      });\n      logger.debug(\"/api/token/ response:\");\n      logger.debug(tokenResult);\n      OpenAPI.TOKEN = tokenResult.access;\n\n      // Fetch their teams and have the user select one.\n      const userResult = await InternalService.userMeWithJwtAuth();\n      logger.debug(\"/api/v1/user/me/ response:\");\n      logger.debug(userResult);\n      const teamId = await select({\n        message: \"Select a Organization:\",\n        choices: userResult.teams.map(({ id, slug }) => ({\n          name: slug,\n          value: id,\n        })),\n      });\n      const team = userResult.teams.find((team) => team.id === teamId);\n      if (!team) {\n        throw new Error(\"No organization selected.\");\n      }\n\n      // Generate an API key.\n      OpenAPI.HEADERS = { \"Sindri-Team-Id\": `${teamId}` };\n      const apiKeyResult = await AuthorizationService.apikeyGenerate({\n        username,\n        password,\n        name,\n      });\n      logger.debug(\"/api/apikey/generate/ response:\");\n      logger.debug(apiKeyResult);\n      const apiKey = apiKeyResult.api_key;\n      const apiKeyId = apiKeyResult.id;\n      const apiKeyName = apiKeyResult.name;\n      if (!apiKey || !apiKeyId || !apiKeyName) {\n        throw new Error(\"Error generating API key.\");\n      }\n\n      // Store the new auth information.\n      config.update({\n        auth: {\n          apiKey,\n          apiKeyId,\n          apiKeyName,\n          baseUrl,\n          teamId,\n          teamSlug: team.slug,\n        },\n      });\n      logger.info(\n        \"You have successfully authorized the client with your Sindri account.\",\n      );\n    } catch (error) {\n      logger.fatal(\"An irrecoverable error occurred.\");\n      logger.error(error);\n      process.exit(1);\n    }\n  });\n","import { Command } from \"@commander-js/extra-typings\";\nimport { confirm } from \"@inquirer/prompts\";\n\nimport { AuthorizationService } from \"lib/api\";\nimport { Config } from \"lib/config\";\nimport { logger } from \"lib/logging\";\n\nexport const logoutCommand = new Command()\n  .name(\"logout\")\n  .description(\"Remove the current client authorization credentials.\")\n  .action(async () => {\n    // Check whether we're currently authenticated.\n    const config = new Config();\n    const auth = config.auth;\n    if (!auth) {\n      logger.error(\"You must log in first with `sindri login`.\");\n      return;\n    }\n\n    // Optionally revoke the current key.\n    const revokeKey = await confirm({\n      message: `Would you like to also revoke the \"${auth.apiKeyName}\" API key? (recommended)`,\n      default: true,\n    });\n    if (revokeKey) {\n      try {\n        const response = await AuthorizationService.apikeyDelete(auth.apiKeyId);\n        logger.info(`Successfully revoked \"${auth.apiKeyName}\" key.`);\n        logger.debug(`/api/v1/apikey/${auth.apiKeyId}/delete/ response:`);\n        logger.debug(response);\n      } catch (error) {\n        logger.warn(\n          `Error revoking \"${auth.apiKeyName}\" key, proceeding to clear credentials anyway.`,\n        );\n        logger.error(error);\n      }\n    } else {\n      logger.warn(\"Skipping revocation of existing key.\");\n    }\n\n    // Clear the existing credentials.\n    config.update({ auth: null });\n    logger.info(\"You have successfully logged out.\");\n  });\n","import process from \"process\";\n\nimport { Command } from \"@commander-js/extra-typings\";\n\nimport { ApiError, InternalService, OpenAPI } from \"lib/api\";\nimport { logger, print } from \"lib/logging\";\n\nexport const whoamiCommand = new Command()\n  .name(\"whoami\")\n  .description(\"Display the currently authorized organization name.\")\n  .action(async () => {\n    // Check that the API client is authorized.\n    if (!OpenAPI.TOKEN || !OpenAPI.BASE) {\n      logger.warn(\"You must login first with `sindri login`.\");\n      return process.exit(1);\n    }\n\n    try {\n      const response = await InternalService.teamMe();\n      logger.debug(\"/api/v1/team/me/ response:\");\n      logger.debug(response);\n      print(response.team.slug);\n    } catch (error) {\n      if (error instanceof ApiError && error.status === 401) {\n        logger.error(\n          \"Your credentials are invalid. Please log in again with `sindri login`.\",\n        );\n      } else {\n        logger.fatal(\"An unknown error occurred.\");\n        logger.error(error);\n        return process.exit(1);\n      }\n    }\n  });\n","import { readFile, stat } from \"fs/promises\";\nimport path from \"path\";\nimport type { Readable } from \"stream\";\n\nimport gzip from \"gzip-js\";\nimport walk from \"ignore-walk\";\nimport tar from \"tar\";\nimport Tar from \"tar-js\";\n\nimport {\n  CircuitsService,\n  CircuitStatus,\n  CircuitType,\n  OpenAPI,\n  ProofsService,\n  ProofStatus,\n} from \"lib/api\";\nimport type {\n  CircomCircuitInfoResponse,\n  Halo2CircuitInfoResponse,\n  GnarkCircuitInfoResponse,\n  NoirCircuitInfoResponse,\n  ProofInfoResponse,\n} from \"lib/api\";\nimport { loadConfig } from \"lib/config\";\nimport { logger, LogLevel } from \"lib/logging\";\nimport { File, FormData } from \"lib/isomorphic\";\nimport type {\n  BrowserFile,\n  BrowserFormData,\n  NodeFile,\n  NodeFormData,\n} from \"lib/isomorphic\";\n\n// Re-export types from the API.\nexport { CircuitStatus, CircuitType, ProofStatus };\nexport type {\n  CircomCircuitInfoResponse,\n  GnarkCircuitInfoResponse,\n  Halo2CircuitInfoResponse,\n  NoirCircuitInfoResponse,\n  ProofInfoResponse,\n};\nexport type CircuitInfoResponse =\n  | CircomCircuitInfoResponse\n  | Halo2CircuitInfoResponse\n  | GnarkCircuitInfoResponse\n  | NoirCircuitInfoResponse;\n\n/**\n * The options for authenticating with the API.\n */\nexport interface AuthOptions {\n  /**\n   * The API key to use for authentication.\n   */\n  apiKey?: string;\n  /**\n   * The base URL for the API.\n   */\n  baseUrl?: string;\n}\n\n/**\n * Represents the primary client for interacting with the Sindri ZKP service API. This class serves\n * as the central entry point for the SDK, facilitating various operations such as compiling ZKP\n * circuits and generating proofs.\n *\n * The {@link SindriClient} class encapsulates all the necessary methods and properties required to\n * communicate effectively with the Sindri ZKP service, handling tasks like authentication, request\n * management, and response processing.\n *\n * Usage of this class typically involves instantiating it with appropriate authentication options\n * and then utilizing its methods to interact with the service.\n *\n * @example\n * // Create an instance of the `SindriClient` class.\n * const client = new SindriClient({ apiKey: 'your-api-key' });\n *\n * // Use the client to interact with the Sindri ZKP service...\n */\nexport class SindriClient {\n  /**\n   * Represents the polling interval in milliseconds used for querying the status of an endpoint.\n   * This value determines the frequency at which the SDK polls an endpoint to check for any changes\n   * in status.\n   *\n   * The choice of polling interval is critical for balancing responsiveness against resource\n   * consumption.  A shorter interval leads to more frequent updates, beneficial for\n   * rapidly-changing statuses, but at the expense of higher network and computational load. In\n   * contrast, a longer interval reduces resource usage but may delay the detection of status\n   * changes.\n   *\n   * For more complex ZKP circuits, which may take longer to compile, considering a larger polling\n   * interval could be advantageous. This approach minimizes unnecessary network traffic and\n   * computational effort while awaiting the completion of these time-intensive operations.\n   *\n   * The default value is set to 1000 milliseconds (1 second), offering a general balance. However,\n   * it can and should be adjusted based on the expected complexity and compilation time of the\n   * circuits being processed.\n   */\n  public pollingInterval: number = 1000;\n\n  /**\n   * Constructs a new instance of the {@link SindriClient} class for interacting with the Sindri ZKP\n   * service.  This constructor initializes the client with the necessary authentication options.\n   *\n   * The provided `authOptions` parameter allows for specifying authentication credentials and\n   * configurations required for the client to communicate securely with the service.  See\n   * {@link SindriClient.authorize} for more details about how authentication credentials are sourced.\n   *\n   * @param authOptions - The authentication options for the client, including\n   * credentials like API keys or tokens. Defaults to an empty object if not provided.\n   *\n   * @example\n   * // Instantiating the SindriClient with authentication options\n   * const client = new SindriClient({ apiKey: 'sindri-...-fskd' });\n   *\n   * @see {@link SindriClient.authorize} for information on retrieving this value.\n   */\n  constructor(authOptions: AuthOptions = {}) {\n    this.authorize(authOptions);\n  }\n\n  /**\n   * Retrieves the current value of the client's API key used for authenticating with the Sindri ZKP\n   * service.  This property is crucial for ensuring secure communication with the API and is\n   * typically set during client initialization.\n   *\n   * If the API key is not set or is in an invalid format (not a string), this getter returns\n   * `null`.  Proper management of the API key is essential for the security and proper functioning\n   * of the SDK.\n   *\n   * @returns The current API key if set and valid, otherwise `null`.\n   *\n   * @example\n   * const currentApiKey = client.apiKey;\n   * if (currentApiKey) {\n   *   console.log('API Key is set.');\n   * } else {\n   *   console.log('API Key is not set or is invalid.');\n   * }\n   */\n  get apiKey(): string | null {\n    if (OpenAPI.TOKEN && typeof OpenAPI.TOKEN !== \"string\") {\n      return null;\n    }\n    return OpenAPI.TOKEN || null;\n  }\n\n  /**\n   * Retrieves the current base URL of the Sindri ZKP service that the client is configured to\n   * interact with.  This URL forms the foundation of all API requests made by the client and is\n   * typically set during client initialization. Anyone other than employees at Sindri can typically\n   * ignore this and use the default value of `https://sindri.app`.\n   *\n   * @returns The current base URL of the Sindri ZKP service.\n   *\n   * @example\n   * console.log(`Current base URL: ${client.baseUrl}`);\n   */\n  get baseUrl(): string {\n    return OpenAPI.BASE;\n  }\n\n  /** Retrieves the current log level of the client. The log level determines the verbosity of logs\n   * produced by the client which can be crucial for debugging and monitoring the client's\n   * interactions with the Sindri ZKP service.\n   *\n   * @returns The current log level of the client.\n   *\n   * @example\n   * console.log(`Current log level: ${client.logLevel}`);\n   */\n  get logLevel(): LogLevel {\n    // We don't specify any custom log levels, so we can narrow the type to exclude strings.\n    return logger.level as LogLevel;\n  }\n\n  /**\n   * Sets the client's log level. This level determines the verbosity of logs produced by the\n   * client, allowing for flexible control over the amount of information logged during operation.\n   *\n   * @param level - The new log level to set for the client.\n   *\n   * @example\n   * // Set log level to debug.\n   * client.logLevel = \"debug\";\n   */\n  set logLevel(level: LogLevel) {\n    logger.level = level;\n  }\n\n  /**\n   * Authorizes the client with the Sindri ZKP service using the provided authentication options.\n   * This method is called automatically after initializing a client, but you may call it again if\n   * you would like to change the credentials. The logic around how credentials is as follows:\n   *\n   * 1. Any explicitly specified options in `authOptions` are always used if provided.\n   * 2. The `SINDRI_API_KEY` and `SINDRI_BASE_URL` environment variables are checked next.\n   * 3. The settings in `sindri.conf.json` (produced by running `sindri login` on the command-line) will be checked after that.\n   * 4. Finally, the default value of `https://sindri.app` will be used for the base URL (this is\n   * typically what you want unless you're an employee at Sindri). The API key will remain unset and\n   * you will only be able to make requests that allow anonymous access.\n   *\n   *\n   * @param authOptions - The authentication details required to authorize the client.\n   * @returns True if authorization is successful, false otherwise.\n   *\n   * @example\n   * const authOptions = { apiKey: 'sindri-...-jskd' };\n   * const isAuthorized = client.authorize(authOptions);\n   * if (isAuthorized) {\n   *   console.log('Client is fully authorized.');\n   * } else {\n   *   console.log('Client is not authorized.');\n   * }\n   */\n  authorize(authOptions: AuthOptions): boolean {\n    if (process.env.BROWSER_BUILD) {\n      OpenAPI.BASE = authOptions.baseUrl || \"https://sindri.app\";\n      OpenAPI.TOKEN = authOptions.apiKey;\n    } else {\n      const config = loadConfig();\n      OpenAPI.BASE =\n        authOptions.baseUrl ||\n        process.env.SINDRI_BASE_URL ||\n        config.auth?.baseUrl ||\n        OpenAPI.BASE ||\n        \"https://sindri.app\";\n      OpenAPI.TOKEN =\n        authOptions.apiKey || process.env.SINDRI_API_KEY || config.auth?.apiKey;\n    }\n    return !!(OpenAPI.BASE && OpenAPI.TOKEN);\n  }\n\n  // }[tags=[\"latest\"]]\n\n  /**\n   * Asynchronously creates and deploys a new circuit, initiating its compilation process.  This\n   * method is essential for submitting new versions of circuits to the Sindri ZKP service for\n   * compilation. Upon deployment, it continuously polls the service to track the compilation status\n   * until the process either completes successfully or fails.\n   *\n   * The method accepts two parameters: `project` and `tags`. The `project` parameter can be either\n   * a string representing the path to the project or an array of files (browser or Node.js file\n   * objects) constituting the circuit. The `tags` parameter is used to assign tags to the deployed\n   * circuit, facilitating versioning and identification. By default, the circuit is tagged as\n   * \"latest\".\n   *\n   * After successful deployment and compilation, the method returns a `CircuitInfoResponse` object,\n   * which includes details about the compiled circuit, such as its identifier and status.\n   *\n   * @param project - In Node.js, this can either be a path to the root\n   * directory of a Sindri project, the path to a gzipped tarball containing the project, or an\n   * array of `buffer.File` objects. In a web browser, it can only be an array of `File` objects.\n   * @param tags - The list of tags, or singular tag if a string is passed, that\n   * should be associated with the deployed circuit. Defaults to `[\"latest\"]`. Specify an empty\n   * array to indicate that you don't care about the compilation outputs and just want to see if it\n   * the circuit will compile.\n   * @returns A promise which resolves to the details of the deployed circuit.\n   *\n   * @example\n   * // Deploy a circuit with a project identifier and default `latest` tag.\n   * const circuit = await client.createCircuit(\"/path/to/circuit-directory/\");\n   * console.log(\"Did circuit compilation succeed?\", circuit.status);\n   *\n   * @example\n   * // Deploy a circuit with files and custom tags.\n   * await client.createCircuit([file1, file2], ['v1.0', 'experimental']);\n   */\n  async createCircuit(\n    project: string | Array<BrowserFile | NodeFile>,\n    tags: string | string[] | null = [\"latest\"],\n  ): Promise<CircuitInfoResponse> {\n    const formData = new FormData();\n\n    // First, validate the tags and them to the form data.\n    tags = typeof tags === \"string\" ? [tags] : tags ?? [];\n    for (const tag of tags) {\n      if (!/^[-a-zA-Z0-9_]+$/.test(tag)) {\n        throw new Error(\n          `\"${tag}\" is not a valid tag. Tags may only contain alphanumeric characters, ` +\n            \"underscores, and hyphens.\",\n        );\n      }\n      formData.append(\"tags\", tag);\n    }\n    if (tags.length === 0) {\n      formData.append(\"tags\", \"\");\n    }\n\n    // Handle `project` being a file or directory path.\n    if (typeof project === \"string\") {\n      if (process.env.BROWSER_BUILD) {\n        throw new Error(\n          \"Specifying `project` as a path is not allowed in the browser build.\",\n        );\n      }\n\n      let projectStats;\n      try {\n        projectStats = await stat(project);\n      } catch {\n        throw new Error(\n          `The \"${project}\" path does not exist or you do not have permission to access it.`,\n        );\n      }\n\n      // If `project` is a path, then it's a prepackaged tarball.\n      if (projectStats.isFile()) {\n        if (!/\\.(zip|tar|tar\\.gz|tgz)$/i.test(project)) {\n          throw new Error(\"Only gzipped tarballs or zip files are supported.\");\n        }\n        const tarballFilename = path.basename(project);\n        const tarballContent = await readFile(project);\n        (formData as NodeFormData).append(\n          \"files\",\n          new File([tarballContent], tarballFilename),\n        );\n\n        // If `project` is a directory, then we need to bundle it.\n      } else if (projectStats.isDirectory()) {\n        const sindriJsonPath = path.join(project, \"sindri.json\");\n        let sindriJsonContent;\n        try {\n          sindriJsonContent = await readFile(sindriJsonPath, {\n            encoding: \"utf-8\",\n          });\n        } catch {\n          throw new Error(\n            `Expected Sindri manifest file at \"${sindriJsonPath}\" does not exist.`,\n          );\n        }\n        let sindriJson;\n        try {\n          sindriJson = JSON.parse(sindriJsonContent) as { name: string };\n        } catch {\n          throw new Error(\n            `Could not parse \"${sindriJsonPath}\", is it valid JSON?`,\n          );\n        }\n        const circuitName = sindriJson?.name;\n        if (!circuitName) {\n          throw new Error(\n            `No circuit \"name\" field was found in \"${sindriJsonPath}\", the manifest is invalid.`,\n          );\n        }\n\n        // Create a tarball with all the files that should be included from the project.\n        const files = walk\n          .sync({\n            follow: true,\n            ignoreFiles: [\".sindriignore\"],\n            path: project,\n          })\n          .filter(\n            (file) =>\n              // Always exclude `.git` subdirectories.\n              !/(^|\\/)\\.git(\\/|$)/.test(file),\n          );\n        // Always include the `sindri.json` file.\n        const sindriJsonFilename = path.basename(sindriJsonPath);\n        if (!files.includes(sindriJsonFilename)) {\n          files.push(sindriJsonFilename);\n        }\n        const tarballFilename = `${circuitName}.tar.gz`;\n        files.sort((a, b) => a.localeCompare(b)); // Deterministic for tests.\n        const tarStream = tar.c(\n          {\n            cwd: project,\n            gzip: true,\n            onwarn: (code: string, message: string) => {\n              logger.warn(`While creating tarball: ${code} - ${message}`);\n            },\n            prefix: `${circuitName}/`,\n            sync: true,\n          },\n          files,\n          // This works around a bug in the typing of `tar` when using `sync`.\n        ) as unknown as Readable;\n\n        // Add the tarball to the form data.\n        (formData as NodeFormData).append(\n          \"files\",\n          new File([tarStream.read()], tarballFilename),\n        );\n      } else {\n        throw new Error(`The \"${project}\" path is not a file or directory.`);\n      }\n\n      // Handle an array of files.\n    } else if (Array.isArray(project)) {\n      // Validate the file array.\n      if (!project.every((file) => file instanceof File)) {\n        throw new Error(\"All entries in `project` must be `File` instances.\");\n      }\n      const sindriJsonFile = project.find(\n        (file) => file.name === \"sindri.json\",\n      );\n      if (!sindriJsonFile) {\n        throw new Error(\n          \"The `project` array must include a `sindri.json` file.\",\n        );\n      }\n      let sindriJson;\n      try {\n        sindriJson = JSON.parse(await sindriJsonFile.text()) as {\n          name: string;\n        };\n      } catch {\n        throw new Error(`Could not parse \"sindri.json\", is it valid JSON?`);\n      }\n      const circuitName = sindriJson?.name;\n      if (!circuitName) {\n        throw new Error(\n          `No circuit \"name\" field was found in \"sindri.json\", the manifest is invalid.`,\n        );\n      }\n\n      // Create the gzipped tarball.\n      const tarball = new Tar();\n      project.sort((a, b) => a.name.localeCompare(b.name)); // Deterministic for tests.\n      for (const file of project) {\n        const content = new Uint8Array(await file.arrayBuffer());\n        await new Promise((resolve) =>\n          tarball.append(`${circuitName}/${file.name}`, content, resolve),\n        );\n      }\n      const gzippedTarball = new Uint8Array(gzip.zip(tarball.out));\n      const tarFile = new File([gzippedTarball], `${circuitName}.tar.gz`);\n\n      // Append the tarball to the form data.\n      // These lines are functionally identical, but we want to typecheck node and browser.\n      if (process.env.BROWSER_BUILD) {\n        (formData as BrowserFormData).append(\"files\", tarFile as BrowserFile);\n      } else {\n        (formData as NodeFormData).append(\"files\", tarFile as NodeFile);\n      }\n    }\n\n    // We need to shuffle in a hard-coded form boundary for tests to be deterministic.\n    // Note that it's import the boundary matches the Chrome format because the test runner checks\n    // payloads for this format in order to compare non-deterministic gzips.\n    // TODO: These header changes are global, we need to make them local to this request.\n    const oldHeaders = OpenAPI.HEADERS;\n    OpenAPI.HEADERS = {\n      \"Content-Type\":\n        \"multipart/form-data; boundary=----WebKitFormBoundary0buQ8d6EhWcs9X9d\",\n    };\n    const createResponsePromise = CircuitsService.circuitCreate(\n      formData as NodeFormData,\n    );\n    const createResponse = await createResponsePromise;\n    OpenAPI.HEADERS = oldHeaders;\n    const circuitId = createResponse.circuit_id;\n\n    let response: CircuitInfoResponse;\n    while (true) {\n      response = await CircuitsService.circuitDetail(circuitId, false);\n      if (response.status === \"Ready\" || response.status === \"Failed\") {\n        break;\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, this.pollingInterval));\n    }\n    return response;\n  }\n\n  /**\n   * Retrieves all proofs associated with a specified circuit.  This method is essential for\n   * obtaining a comprehensive list of proofs generated for a given circuit, identified by its\n   * unique circuit ID. It returns an array of `ProofInfoResponse` objects, each representing a\n   * proof associated with the circuit.\n   *\n   * The method is particularly useful in scenarios where tracking or auditing all proofs of a\n   * circuit is necessary. This could include verifying the integrity of proofs, understanding their\n   * usage, or simply enumerating them for record-keeping.\n   *\n   * The `circuitId` parameter is a string that uniquely identifies the circuit in question. It's\n   * crucial to provide the correct circuit ID to retrieve the corresponding proofs accurately.\n   *\n   * @param circuitId - The unique identifier of the circuit for which proofs are to be retrieved.\n   * @returns A promise that resolves to an array of details for each associated proof.\n   *\n   * @example\n   * const proofs = await client.getAllCircuitProofs(circuitId);\n   * console.log(\"Proofs:', proofs);\n   */\n  async getAllCircuitProofs(circuitId: string): Promise<ProofInfoResponse[]> {\n    return await CircuitsService.circuitProofs(circuitId);\n  }\n\n  /**\n   * Retrieves all circuits associated with the team.  This method fetches a list of all circuits\n   * that have been created or accessed by the currently authenticated team. It's a key method for\n   * managing and monitoring circuit usage within a team, offering insights into the variety and\n   * scope of circuits in use.\n   *\n   * @returns A promise that resolves to an array of circuit information responses.\n   *\n   * @example\n   * const circuits = await = client.getAllCircuits();\n   * console.log(\"Circuits:\", circuits);\n   */\n  async getAllCircuits(): Promise<CircuitInfoResponse[]> {\n    return await CircuitsService.circuitList();\n  }\n\n  /**\n   * Retrieves all proofs associated with the team.  This method is designed to fetch a list of all\n   * proofs generated by the current team across all circuits, providing a holistic view of the\n   * team's activities in proof generation and management.\n   *\n   * Utilizing this method helps in gaining insights into the proofs created, their status, and\n   * other relevant details, which is essential for effective team-wide proof tracking and auditing.\n   * It returns a promise that resolves to an array of {@link ProofInfoResponse} objects, where each\n   * object encapsulates detailed information about a specific proof.\n   *\n   * @returns A promise that resolves to an array of proofs.\n   *\n   * @example\n   * const proofs = await clientgetAllProofs()\n   * console.log(\"How many proofs?\", proofs.length);\n   */\n  async getAllProofs(): Promise<ProofInfoResponse[]> {\n    return await ProofsService.proofList();\n  }\n\n  /**\n   * Retrieves a specific circuit using its unique circuit ID.  This method is crucial for obtaining\n   * detailed information about a particular circuit,  identified by the provided `circuitId`. It's\n   * especially useful when detailed insights  or operations on a single circuit are required, rather\n   * than handling multiple circuits.\n   *\n   * *Note:* In case the provided `circuitId` is invalid or does not correspond to an existing circuit,\n   * the promise may reject, indicating an error. Proper error handling is therefore essential when using this method.\n   *\n   * @param circuitId - The unique identifier of the circuit to retrieve.\n   * @returns A promise that resolves to the information about the specified circuit.\n   *\n   * @example\n   * const circuit = await client.getCircuit(circuitId);\n   * console.log('Circuit details:', circuit);\n   */\n  async getCircuit(circuitId: string): Promise<CircuitInfoResponse> {\n    return await CircuitsService.circuitDetail(circuitId);\n  }\n\n  /**\n   * Retrieves detailed information about a specific proof, identified by its unique proof ID.  This\n   * method is vital for obtaining individual proof details, facilitating in-depth analysis or\n   * verification of a particular proof within the system.\n   *\n   * The `proofId` parameter is the key identifier for the proof, and it should be provided to fetch\n   * the corresponding information. The method returns a promise that resolves to a\n   * {@link ProofInfoResponse}, containing all relevant details of the proof.\n   *\n   * @param proofId - The unique identifier of the proof to retrieve.\n   * @returns A promise that resolves to the data about the specified proof.\n   *\n   * @example\n   * const proof = await client.getProof(proofId);\n   * console.log(\"Proof details:\", proof);\n   */\n  async getProof(proofId: string): Promise<ProofInfoResponse> {\n    return await ProofsService.proofDetail(proofId);\n  }\n\n  /**\n   * Generates a proof for a specified circuit.  This method is critical for creating a new proof\n   * based on a given circuit, identified by `circuitId`, and the provided `proofInput`. It's\n   * primarily used to validate or verify certain conditions or properties of the circuit without\n   * revealing underlying data or specifics. The method continuously polls the service to track the\n   * compilation status until the process either completes successfully or fails.\n   *\n   * The `circuitId` parameter specifies the unique identifier of the circuit for which the proof is\n   * to be generated.  The `proofInput` is a string that represents the necessary input data or\n   * parameters required for generating the proof.\n   *\n   * @param circuitId - The unique identifier of the circuit for which the proof is being generated.\n   * @param proofInput - The input data required for generating the proof. This should be a string\n   * containing either JSON data or TOML data (in the case of Noir).\n   * @returns A promise that resolves to the information of the generated proof.\n   *\n   * @example\n   * const proof = await client.proveCircuit(circuitId, '{\"X\": 23, \"Y\": 52}');\n   * console.log(\"Generated proof:\", proof);\n   */\n  async proveCircuit(\n    circuitId: string,\n    proofInput: string,\n  ): Promise<ProofInfoResponse> {\n    const createResponse = await CircuitsService.proofCreate(circuitId, {\n      proof_input: proofInput,\n    });\n    let response: ProofInfoResponse;\n    while (true) {\n      response = await ProofsService.proofDetail(createResponse.proof_id);\n      if (response.status === \"Ready\" || response.status === \"Failed\") {\n        break;\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, this.pollingInterval));\n    }\n    return response;\n  }\n}\n","import { SindriClient } from \"./client\";\n\nexport default new SindriClient();\n\nexport type * from \"./client\";\nexport type { LogLevel } from \"./logging\";\n"],"mappings":"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","names":["cli_exports","__export","program","__toCommonJS","getImportMetaUrl","importMetaUrl","import_assert","import_process","import_extra_typings","import_extra_typings","import_fs","import_path","import_env_paths","import_lodash","import_zod","ApiError","request","response","message","CancelError","message","CancelablePromise","#isResolved","#isRejected","#isCancelled","#cancelHandlers","#promise","#resolve","#reject","executor","resolve","reject","onResolve","value","onReject","reason","onCancel","cancelHandler","onFulfilled","onRejected","onFinally","error","OpenAPI","import_axios","import_buffer","import_formdata_node","File","NodeFile","FormData","NodeFormData","isDefined","value","isString","isStringWithValue","isBlob","isFormData","FormData","isSuccess","status","base64","str","getQueryString","params","qs","append","key","process","v","k","getUrl","config","options","encoder","path","substring","group","url","getFormData","formData","_","resolve","resolver","getHeaders","token","username","password","additionalHeaders","formHeaders","headers","credentials","getRequestBody","sendRequest","body","onCancel","axiosClient","source","axios","requestConfig","error","axiosError","getResponseHeader","response","responseHeader","content","getResponseBody","catchErrorCodes","result","ApiError","errorStatus","errorStatusText","errorBody","request","CancelablePromise","reject","responseBody","AuthorizationService","requestBody","request","OpenAPI","name","apikeyId","CircuitsService","formData","request","OpenAPI","includeVerificationKey","circuitId","includeProofInput","includeProof","includePublic","InternalService","formData","request","OpenAPI","ProofsService","includeProofInput","includeProof","includePublic","includeVerificationKey","request","OpenAPI","proofId","TokenService","requestBody","request","OpenAPI","import_pino","import_pino_pretty","logger","pino","pretty","print","getConfigPath","paths","envPaths","path","ConfigSchema","defaultConfig","loadConfig","configPath","fs","logger","configFileContents","loadedConfig","error","_","Config","_Config","OpenAPI","configData","newConfig","directory","configListCommand","config","Config","print","configCommand","import_child_process","import_fs","import_path","import_process","import_extra_typings","import_prompts","import_fs","import_promises","import_path","import_url","import_nunjucks","currentFilePath","importMetaUrl","currentDirectoryPath","path","fileExists","filePath","fsConstants","findFileUpwards","filename","initialDirectory","files","file","parentDirectory","loadPackageJson","packageJsonPath","locatePackageJson","packageJsonContent","loadSindriManifestJsonSchema","sindriManifestJsonPath","sindriManifestJsonContent","scaffoldDirectory","templateDirectory","outputDirectory","context","fullOutputDirectory","rootTemplateDirectory","fullTemplateDirectory","render","content","newContent","key","value","nunjucks","processPath","inputPath","outputPath","logger","populatedFile","template","renderedTemplate","initCommand","directory","directoryPath","path","directoryName","logger","process","circuitName","input","circuitType","context","provingScheme","curveName","witnessCompiler","packageName","gnarkCurveName","halo2Version","threadBuilder","degree","className","noirVersion","scaffoldDirectory","gitKeepFile","npmInstalled","gitInstalled","gitAlreadyInitialized","error","execError","key","import_buffer","import_fs","import_path","import_process","import_extra_typings","import_formdata_node","import_ignore_walk","import_tar","deployCommand","directory","tags","untagged","logger","process","tag","directoryPath","path","sindriJsonPath","findFileUpwards","rootDirectory","sindriJson","sindriJsonContent","error","circuitName","OpenAPI","files","walk","file","sindriJsonFilename","formData","tarballFilename","tar","code","message","circuitId","response","CircuitsService","ApiError","startTime","previousStatus","elapsedSeconds","resolve","import_fs","import_path","import_process","import_extra_typings","import_jsonschema","lintCommand","directory","errorCount","warningCount","sindriManifestJsonSchema","loadSindriManifestJsonSchema","logger","process","directoryPath","path","sindriJsonPath","findFileUpwards","rootDirectory","sindriJson","sindriJsonContent","error","validationStatus","JsonValidator","prefix","readmePath","import_os","import_process","import_extra_typings","import_prompts","loginCommand","OpenAPI","baseUrl","config","Config","auth","authenticated","teamMeResult","InternalService","logger","error","ApiError","process","username","password","passwordInput","name","os","tokenResult","TokenService","userResult","teamId","id","slug","team","apiKeyResult","AuthorizationService","apiKey","apiKeyId","apiKeyName","import_extra_typings","import_prompts","logoutCommand","config","Config","auth","logger","response","AuthorizationService","error","import_process","import_extra_typings","whoamiCommand","OpenAPI","logger","process","response","InternalService","print","error","ApiError","import_promises","import_path","import_gzip_js","import_ignore_walk","import_tar","import_tar_js","SindriClient","authOptions","OpenAPI","logger","level","config","loadConfig","project","tags","formData","FormData","tag","projectStats","tarballFilename","path","tarballContent","File","sindriJsonPath","sindriJsonContent","sindriJson","circuitName","files","walk","file","sindriJsonFilename","a","b","tarStream","tar","code","message","sindriJsonFile","tarball","Tar","content","resolve","gzippedTarball","gzip","tarFile","oldHeaders","createResponse","CircuitsService","circuitId","response","ProofsService","proofId","proofInput","lib_default","SindriClient","program","loadPackageJson","configCommand","initCommand","deployCommand","lintCommand","loginCommand","logoutCommand","whoamiCommand","command","debug","quiet","logger","assert","lib_default"]}