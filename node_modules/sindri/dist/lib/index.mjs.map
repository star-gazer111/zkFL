{"version":3,"sources":["../../src/lib/client.ts","../../src/lib/api/core/ApiError.ts","../../src/lib/api/core/CancelablePromise.ts","../../src/lib/api/core/OpenAPI.ts","../../src/lib/api/core/request.ts","../../src/lib/isomorphic.ts","../../src/lib/api/services/CircuitsService.ts","../../src/lib/api/services/ProofsService.ts","../../src/lib/config.ts","../../src/lib/logging.ts","../../src/lib/index.ts"],"sourcesContent":["import { readFile, stat } from \"fs/promises\";\nimport path from \"path\";\nimport type { Readable } from \"stream\";\n\nimport gzip from \"gzip-js\";\nimport walk from \"ignore-walk\";\nimport tar from \"tar\";\nimport Tar from \"tar-js\";\n\nimport {\n  CircuitsService,\n  CircuitStatus,\n  CircuitType,\n  OpenAPI,\n  ProofsService,\n  ProofStatus,\n} from \"lib/api\";\nimport type {\n  CircomCircuitInfoResponse,\n  Halo2CircuitInfoResponse,\n  GnarkCircuitInfoResponse,\n  NoirCircuitInfoResponse,\n  ProofInfoResponse,\n} from \"lib/api\";\nimport { loadConfig } from \"lib/config\";\nimport { logger, LogLevel } from \"lib/logging\";\nimport { File, FormData } from \"lib/isomorphic\";\nimport type {\n  BrowserFile,\n  BrowserFormData,\n  NodeFile,\n  NodeFormData,\n} from \"lib/isomorphic\";\n\n// Re-export types from the API.\nexport { CircuitStatus, CircuitType, ProofStatus };\nexport type {\n  CircomCircuitInfoResponse,\n  GnarkCircuitInfoResponse,\n  Halo2CircuitInfoResponse,\n  NoirCircuitInfoResponse,\n  ProofInfoResponse,\n};\nexport type CircuitInfoResponse =\n  | CircomCircuitInfoResponse\n  | Halo2CircuitInfoResponse\n  | GnarkCircuitInfoResponse\n  | NoirCircuitInfoResponse;\n\n/**\n * The options for authenticating with the API.\n */\nexport interface AuthOptions {\n  /**\n   * The API key to use for authentication.\n   */\n  apiKey?: string;\n  /**\n   * The base URL for the API.\n   */\n  baseUrl?: string;\n}\n\n/**\n * Represents the primary client for interacting with the Sindri ZKP service API. This class serves\n * as the central entry point for the SDK, facilitating various operations such as compiling ZKP\n * circuits and generating proofs.\n *\n * The {@link SindriClient} class encapsulates all the necessary methods and properties required to\n * communicate effectively with the Sindri ZKP service, handling tasks like authentication, request\n * management, and response processing.\n *\n * Usage of this class typically involves instantiating it with appropriate authentication options\n * and then utilizing its methods to interact with the service.\n *\n * @example\n * // Create an instance of the `SindriClient` class.\n * const client = new SindriClient({ apiKey: 'your-api-key' });\n *\n * // Use the client to interact with the Sindri ZKP service...\n */\nexport class SindriClient {\n  /**\n   * Represents the polling interval in milliseconds used for querying the status of an endpoint.\n   * This value determines the frequency at which the SDK polls an endpoint to check for any changes\n   * in status.\n   *\n   * The choice of polling interval is critical for balancing responsiveness against resource\n   * consumption.  A shorter interval leads to more frequent updates, beneficial for\n   * rapidly-changing statuses, but at the expense of higher network and computational load. In\n   * contrast, a longer interval reduces resource usage but may delay the detection of status\n   * changes.\n   *\n   * For more complex ZKP circuits, which may take longer to compile, considering a larger polling\n   * interval could be advantageous. This approach minimizes unnecessary network traffic and\n   * computational effort while awaiting the completion of these time-intensive operations.\n   *\n   * The default value is set to 1000 milliseconds (1 second), offering a general balance. However,\n   * it can and should be adjusted based on the expected complexity and compilation time of the\n   * circuits being processed.\n   */\n  public pollingInterval: number = 1000;\n\n  /**\n   * Constructs a new instance of the {@link SindriClient} class for interacting with the Sindri ZKP\n   * service.  This constructor initializes the client with the necessary authentication options.\n   *\n   * The provided `authOptions` parameter allows for specifying authentication credentials and\n   * configurations required for the client to communicate securely with the service.  See\n   * {@link SindriClient.authorize} for more details about how authentication credentials are sourced.\n   *\n   * @param authOptions - The authentication options for the client, including\n   * credentials like API keys or tokens. Defaults to an empty object if not provided.\n   *\n   * @example\n   * // Instantiating the SindriClient with authentication options\n   * const client = new SindriClient({ apiKey: 'sindri-...-fskd' });\n   *\n   * @see {@link SindriClient.authorize} for information on retrieving this value.\n   */\n  constructor(authOptions: AuthOptions = {}) {\n    this.authorize(authOptions);\n  }\n\n  /**\n   * Retrieves the current value of the client's API key used for authenticating with the Sindri ZKP\n   * service.  This property is crucial for ensuring secure communication with the API and is\n   * typically set during client initialization.\n   *\n   * If the API key is not set or is in an invalid format (not a string), this getter returns\n   * `null`.  Proper management of the API key is essential for the security and proper functioning\n   * of the SDK.\n   *\n   * @returns The current API key if set and valid, otherwise `null`.\n   *\n   * @example\n   * const currentApiKey = client.apiKey;\n   * if (currentApiKey) {\n   *   console.log('API Key is set.');\n   * } else {\n   *   console.log('API Key is not set or is invalid.');\n   * }\n   */\n  get apiKey(): string | null {\n    if (OpenAPI.TOKEN && typeof OpenAPI.TOKEN !== \"string\") {\n      return null;\n    }\n    return OpenAPI.TOKEN || null;\n  }\n\n  /**\n   * Retrieves the current base URL of the Sindri ZKP service that the client is configured to\n   * interact with.  This URL forms the foundation of all API requests made by the client and is\n   * typically set during client initialization. Anyone other than employees at Sindri can typically\n   * ignore this and use the default value of `https://sindri.app`.\n   *\n   * @returns The current base URL of the Sindri ZKP service.\n   *\n   * @example\n   * console.log(`Current base URL: ${client.baseUrl}`);\n   */\n  get baseUrl(): string {\n    return OpenAPI.BASE;\n  }\n\n  /** Retrieves the current log level of the client. The log level determines the verbosity of logs\n   * produced by the client which can be crucial for debugging and monitoring the client's\n   * interactions with the Sindri ZKP service.\n   *\n   * @returns The current log level of the client.\n   *\n   * @example\n   * console.log(`Current log level: ${client.logLevel}`);\n   */\n  get logLevel(): LogLevel {\n    // We don't specify any custom log levels, so we can narrow the type to exclude strings.\n    return logger.level as LogLevel;\n  }\n\n  /**\n   * Sets the client's log level. This level determines the verbosity of logs produced by the\n   * client, allowing for flexible control over the amount of information logged during operation.\n   *\n   * @param level - The new log level to set for the client.\n   *\n   * @example\n   * // Set log level to debug.\n   * client.logLevel = \"debug\";\n   */\n  set logLevel(level: LogLevel) {\n    logger.level = level;\n  }\n\n  /**\n   * Authorizes the client with the Sindri ZKP service using the provided authentication options.\n   * This method is called automatically after initializing a client, but you may call it again if\n   * you would like to change the credentials. The logic around how credentials is as follows:\n   *\n   * 1. Any explicitly specified options in `authOptions` are always used if provided.\n   * 2. The `SINDRI_API_KEY` and `SINDRI_BASE_URL` environment variables are checked next.\n   * 3. The settings in `sindri.conf.json` (produced by running `sindri login` on the command-line) will be checked after that.\n   * 4. Finally, the default value of `https://sindri.app` will be used for the base URL (this is\n   * typically what you want unless you're an employee at Sindri). The API key will remain unset and\n   * you will only be able to make requests that allow anonymous access.\n   *\n   *\n   * @param authOptions - The authentication details required to authorize the client.\n   * @returns True if authorization is successful, false otherwise.\n   *\n   * @example\n   * const authOptions = { apiKey: 'sindri-...-jskd' };\n   * const isAuthorized = client.authorize(authOptions);\n   * if (isAuthorized) {\n   *   console.log('Client is fully authorized.');\n   * } else {\n   *   console.log('Client is not authorized.');\n   * }\n   */\n  authorize(authOptions: AuthOptions): boolean {\n    if (process.env.BROWSER_BUILD) {\n      OpenAPI.BASE = authOptions.baseUrl || \"https://sindri.app\";\n      OpenAPI.TOKEN = authOptions.apiKey;\n    } else {\n      const config = loadConfig();\n      OpenAPI.BASE =\n        authOptions.baseUrl ||\n        process.env.SINDRI_BASE_URL ||\n        config.auth?.baseUrl ||\n        OpenAPI.BASE ||\n        \"https://sindri.app\";\n      OpenAPI.TOKEN =\n        authOptions.apiKey || process.env.SINDRI_API_KEY || config.auth?.apiKey;\n    }\n    return !!(OpenAPI.BASE && OpenAPI.TOKEN);\n  }\n\n  // }[tags=[\"latest\"]]\n\n  /**\n   * Asynchronously creates and deploys a new circuit, initiating its compilation process.  This\n   * method is essential for submitting new versions of circuits to the Sindri ZKP service for\n   * compilation. Upon deployment, it continuously polls the service to track the compilation status\n   * until the process either completes successfully or fails.\n   *\n   * The method accepts two parameters: `project` and `tags`. The `project` parameter can be either\n   * a string representing the path to the project or an array of files (browser or Node.js file\n   * objects) constituting the circuit. The `tags` parameter is used to assign tags to the deployed\n   * circuit, facilitating versioning and identification. By default, the circuit is tagged as\n   * \"latest\".\n   *\n   * After successful deployment and compilation, the method returns a `CircuitInfoResponse` object,\n   * which includes details about the compiled circuit, such as its identifier and status.\n   *\n   * @param project - In Node.js, this can either be a path to the root\n   * directory of a Sindri project, the path to a gzipped tarball containing the project, or an\n   * array of `buffer.File` objects. In a web browser, it can only be an array of `File` objects.\n   * @param tags - The list of tags, or singular tag if a string is passed, that\n   * should be associated with the deployed circuit. Defaults to `[\"latest\"]`. Specify an empty\n   * array to indicate that you don't care about the compilation outputs and just want to see if it\n   * the circuit will compile.\n   * @returns A promise which resolves to the details of the deployed circuit.\n   *\n   * @example\n   * // Deploy a circuit with a project identifier and default `latest` tag.\n   * const circuit = await client.createCircuit(\"/path/to/circuit-directory/\");\n   * console.log(\"Did circuit compilation succeed?\", circuit.status);\n   *\n   * @example\n   * // Deploy a circuit with files and custom tags.\n   * await client.createCircuit([file1, file2], ['v1.0', 'experimental']);\n   */\n  async createCircuit(\n    project: string | Array<BrowserFile | NodeFile>,\n    tags: string | string[] | null = [\"latest\"],\n  ): Promise<CircuitInfoResponse> {\n    const formData = new FormData();\n\n    // First, validate the tags and them to the form data.\n    tags = typeof tags === \"string\" ? [tags] : tags ?? [];\n    for (const tag of tags) {\n      if (!/^[-a-zA-Z0-9_]+$/.test(tag)) {\n        throw new Error(\n          `\"${tag}\" is not a valid tag. Tags may only contain alphanumeric characters, ` +\n            \"underscores, and hyphens.\",\n        );\n      }\n      formData.append(\"tags\", tag);\n    }\n    if (tags.length === 0) {\n      formData.append(\"tags\", \"\");\n    }\n\n    // Handle `project` being a file or directory path.\n    if (typeof project === \"string\") {\n      if (process.env.BROWSER_BUILD) {\n        throw new Error(\n          \"Specifying `project` as a path is not allowed in the browser build.\",\n        );\n      }\n\n      let projectStats;\n      try {\n        projectStats = await stat(project);\n      } catch {\n        throw new Error(\n          `The \"${project}\" path does not exist or you do not have permission to access it.`,\n        );\n      }\n\n      // If `project` is a path, then it's a prepackaged tarball.\n      if (projectStats.isFile()) {\n        if (!/\\.(zip|tar|tar\\.gz|tgz)$/i.test(project)) {\n          throw new Error(\"Only gzipped tarballs or zip files are supported.\");\n        }\n        const tarballFilename = path.basename(project);\n        const tarballContent = await readFile(project);\n        (formData as NodeFormData).append(\n          \"files\",\n          new File([tarballContent], tarballFilename),\n        );\n\n        // If `project` is a directory, then we need to bundle it.\n      } else if (projectStats.isDirectory()) {\n        const sindriJsonPath = path.join(project, \"sindri.json\");\n        let sindriJsonContent;\n        try {\n          sindriJsonContent = await readFile(sindriJsonPath, {\n            encoding: \"utf-8\",\n          });\n        } catch {\n          throw new Error(\n            `Expected Sindri manifest file at \"${sindriJsonPath}\" does not exist.`,\n          );\n        }\n        let sindriJson;\n        try {\n          sindriJson = JSON.parse(sindriJsonContent) as { name: string };\n        } catch {\n          throw new Error(\n            `Could not parse \"${sindriJsonPath}\", is it valid JSON?`,\n          );\n        }\n        const circuitName = sindriJson?.name;\n        if (!circuitName) {\n          throw new Error(\n            `No circuit \"name\" field was found in \"${sindriJsonPath}\", the manifest is invalid.`,\n          );\n        }\n\n        // Create a tarball with all the files that should be included from the project.\n        const files = walk\n          .sync({\n            follow: true,\n            ignoreFiles: [\".sindriignore\"],\n            path: project,\n          })\n          .filter(\n            (file) =>\n              // Always exclude `.git` subdirectories.\n              !/(^|\\/)\\.git(\\/|$)/.test(file),\n          );\n        // Always include the `sindri.json` file.\n        const sindriJsonFilename = path.basename(sindriJsonPath);\n        if (!files.includes(sindriJsonFilename)) {\n          files.push(sindriJsonFilename);\n        }\n        const tarballFilename = `${circuitName}.tar.gz`;\n        files.sort((a, b) => a.localeCompare(b)); // Deterministic for tests.\n        const tarStream = tar.c(\n          {\n            cwd: project,\n            gzip: true,\n            onwarn: (code: string, message: string) => {\n              logger.warn(`While creating tarball: ${code} - ${message}`);\n            },\n            prefix: `${circuitName}/`,\n            sync: true,\n          },\n          files,\n          // This works around a bug in the typing of `tar` when using `sync`.\n        ) as unknown as Readable;\n\n        // Add the tarball to the form data.\n        (formData as NodeFormData).append(\n          \"files\",\n          new File([tarStream.read()], tarballFilename),\n        );\n      } else {\n        throw new Error(`The \"${project}\" path is not a file or directory.`);\n      }\n\n      // Handle an array of files.\n    } else if (Array.isArray(project)) {\n      // Validate the file array.\n      if (!project.every((file) => file instanceof File)) {\n        throw new Error(\"All entries in `project` must be `File` instances.\");\n      }\n      const sindriJsonFile = project.find(\n        (file) => file.name === \"sindri.json\",\n      );\n      if (!sindriJsonFile) {\n        throw new Error(\n          \"The `project` array must include a `sindri.json` file.\",\n        );\n      }\n      let sindriJson;\n      try {\n        sindriJson = JSON.parse(await sindriJsonFile.text()) as {\n          name: string;\n        };\n      } catch {\n        throw new Error(`Could not parse \"sindri.json\", is it valid JSON?`);\n      }\n      const circuitName = sindriJson?.name;\n      if (!circuitName) {\n        throw new Error(\n          `No circuit \"name\" field was found in \"sindri.json\", the manifest is invalid.`,\n        );\n      }\n\n      // Create the gzipped tarball.\n      const tarball = new Tar();\n      project.sort((a, b) => a.name.localeCompare(b.name)); // Deterministic for tests.\n      for (const file of project) {\n        const content = new Uint8Array(await file.arrayBuffer());\n        await new Promise((resolve) =>\n          tarball.append(`${circuitName}/${file.name}`, content, resolve),\n        );\n      }\n      const gzippedTarball = new Uint8Array(gzip.zip(tarball.out));\n      const tarFile = new File([gzippedTarball], `${circuitName}.tar.gz`);\n\n      // Append the tarball to the form data.\n      // These lines are functionally identical, but we want to typecheck node and browser.\n      if (process.env.BROWSER_BUILD) {\n        (formData as BrowserFormData).append(\"files\", tarFile as BrowserFile);\n      } else {\n        (formData as NodeFormData).append(\"files\", tarFile as NodeFile);\n      }\n    }\n\n    // We need to shuffle in a hard-coded form boundary for tests to be deterministic.\n    // Note that it's import the boundary matches the Chrome format because the test runner checks\n    // payloads for this format in order to compare non-deterministic gzips.\n    // TODO: These header changes are global, we need to make them local to this request.\n    const oldHeaders = OpenAPI.HEADERS;\n    OpenAPI.HEADERS = {\n      \"Content-Type\":\n        \"multipart/form-data; boundary=----WebKitFormBoundary0buQ8d6EhWcs9X9d\",\n    };\n    const createResponsePromise = CircuitsService.circuitCreate(\n      formData as NodeFormData,\n    );\n    const createResponse = await createResponsePromise;\n    OpenAPI.HEADERS = oldHeaders;\n    const circuitId = createResponse.circuit_id;\n\n    let response: CircuitInfoResponse;\n    while (true) {\n      response = await CircuitsService.circuitDetail(circuitId, false);\n      if (response.status === \"Ready\" || response.status === \"Failed\") {\n        break;\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, this.pollingInterval));\n    }\n    return response;\n  }\n\n  /**\n   * Retrieves all proofs associated with a specified circuit.  This method is essential for\n   * obtaining a comprehensive list of proofs generated for a given circuit, identified by its\n   * unique circuit ID. It returns an array of `ProofInfoResponse` objects, each representing a\n   * proof associated with the circuit.\n   *\n   * The method is particularly useful in scenarios where tracking or auditing all proofs of a\n   * circuit is necessary. This could include verifying the integrity of proofs, understanding their\n   * usage, or simply enumerating them for record-keeping.\n   *\n   * The `circuitId` parameter is a string that uniquely identifies the circuit in question. It's\n   * crucial to provide the correct circuit ID to retrieve the corresponding proofs accurately.\n   *\n   * @param circuitId - The unique identifier of the circuit for which proofs are to be retrieved.\n   * @returns A promise that resolves to an array of details for each associated proof.\n   *\n   * @example\n   * const proofs = await client.getAllCircuitProofs(circuitId);\n   * console.log(\"Proofs:', proofs);\n   */\n  async getAllCircuitProofs(circuitId: string): Promise<ProofInfoResponse[]> {\n    return await CircuitsService.circuitProofs(circuitId);\n  }\n\n  /**\n   * Retrieves all circuits associated with the team.  This method fetches a list of all circuits\n   * that have been created or accessed by the currently authenticated team. It's a key method for\n   * managing and monitoring circuit usage within a team, offering insights into the variety and\n   * scope of circuits in use.\n   *\n   * @returns A promise that resolves to an array of circuit information responses.\n   *\n   * @example\n   * const circuits = await = client.getAllCircuits();\n   * console.log(\"Circuits:\", circuits);\n   */\n  async getAllCircuits(): Promise<CircuitInfoResponse[]> {\n    return await CircuitsService.circuitList();\n  }\n\n  /**\n   * Retrieves all proofs associated with the team.  This method is designed to fetch a list of all\n   * proofs generated by the current team across all circuits, providing a holistic view of the\n   * team's activities in proof generation and management.\n   *\n   * Utilizing this method helps in gaining insights into the proofs created, their status, and\n   * other relevant details, which is essential for effective team-wide proof tracking and auditing.\n   * It returns a promise that resolves to an array of {@link ProofInfoResponse} objects, where each\n   * object encapsulates detailed information about a specific proof.\n   *\n   * @returns A promise that resolves to an array of proofs.\n   *\n   * @example\n   * const proofs = await clientgetAllProofs()\n   * console.log(\"How many proofs?\", proofs.length);\n   */\n  async getAllProofs(): Promise<ProofInfoResponse[]> {\n    return await ProofsService.proofList();\n  }\n\n  /**\n   * Retrieves a specific circuit using its unique circuit ID.  This method is crucial for obtaining\n   * detailed information about a particular circuit,  identified by the provided `circuitId`. It's\n   * especially useful when detailed insights  or operations on a single circuit are required, rather\n   * than handling multiple circuits.\n   *\n   * *Note:* In case the provided `circuitId` is invalid or does not correspond to an existing circuit,\n   * the promise may reject, indicating an error. Proper error handling is therefore essential when using this method.\n   *\n   * @param circuitId - The unique identifier of the circuit to retrieve.\n   * @returns A promise that resolves to the information about the specified circuit.\n   *\n   * @example\n   * const circuit = await client.getCircuit(circuitId);\n   * console.log('Circuit details:', circuit);\n   */\n  async getCircuit(circuitId: string): Promise<CircuitInfoResponse> {\n    return await CircuitsService.circuitDetail(circuitId);\n  }\n\n  /**\n   * Retrieves detailed information about a specific proof, identified by its unique proof ID.  This\n   * method is vital for obtaining individual proof details, facilitating in-depth analysis or\n   * verification of a particular proof within the system.\n   *\n   * The `proofId` parameter is the key identifier for the proof, and it should be provided to fetch\n   * the corresponding information. The method returns a promise that resolves to a\n   * {@link ProofInfoResponse}, containing all relevant details of the proof.\n   *\n   * @param proofId - The unique identifier of the proof to retrieve.\n   * @returns A promise that resolves to the data about the specified proof.\n   *\n   * @example\n   * const proof = await client.getProof(proofId);\n   * console.log(\"Proof details:\", proof);\n   */\n  async getProof(proofId: string): Promise<ProofInfoResponse> {\n    return await ProofsService.proofDetail(proofId);\n  }\n\n  /**\n   * Generates a proof for a specified circuit.  This method is critical for creating a new proof\n   * based on a given circuit, identified by `circuitId`, and the provided `proofInput`. It's\n   * primarily used to validate or verify certain conditions or properties of the circuit without\n   * revealing underlying data or specifics. The method continuously polls the service to track the\n   * compilation status until the process either completes successfully or fails.\n   *\n   * The `circuitId` parameter specifies the unique identifier of the circuit for which the proof is\n   * to be generated.  The `proofInput` is a string that represents the necessary input data or\n   * parameters required for generating the proof.\n   *\n   * @param circuitId - The unique identifier of the circuit for which the proof is being generated.\n   * @param proofInput - The input data required for generating the proof. This should be a string\n   * containing either JSON data or TOML data (in the case of Noir).\n   * @returns A promise that resolves to the information of the generated proof.\n   *\n   * @example\n   * const proof = await client.proveCircuit(circuitId, '{\"X\": 23, \"Y\": 52}');\n   * console.log(\"Generated proof:\", proof);\n   */\n  async proveCircuit(\n    circuitId: string,\n    proofInput: string,\n  ): Promise<ProofInfoResponse> {\n    const createResponse = await CircuitsService.proofCreate(circuitId, {\n      proof_input: proofInput,\n    });\n    let response: ProofInfoResponse;\n    while (true) {\n      response = await ProofsService.proofDetail(createResponse.proof_id);\n      if (response.status === \"Ready\" || response.status === \"Failed\") {\n        break;\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, this.pollingInterval));\n    }\n    return response;\n  }\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from \"./ApiRequestOptions\";\nimport type { ApiResult } from \"./ApiResult\";\n\nexport class ApiError extends Error {\n  public readonly url: string;\n  public readonly status: number;\n  public readonly statusText: string;\n  public readonly body: any;\n  public readonly request: ApiRequestOptions;\n\n  constructor(\n    request: ApiRequestOptions,\n    response: ApiResult,\n    message: string,\n  ) {\n    super(message);\n\n    this.name = \"ApiError\";\n    this.url = response.url;\n    this.status = response.status;\n    this.statusText = response.statusText;\n    this.body = response.body;\n    this.request = request;\n  }\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport class CancelError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"CancelError\";\n  }\n\n  public get isCancelled(): boolean {\n    return true;\n  }\n}\n\nexport interface OnCancel {\n  readonly isResolved: boolean;\n  readonly isRejected: boolean;\n  readonly isCancelled: boolean;\n\n  (cancelHandler: () => void): void;\n}\n\nexport class CancelablePromise<T> implements Promise<T> {\n  #isResolved: boolean;\n  #isRejected: boolean;\n  #isCancelled: boolean;\n  readonly #cancelHandlers: (() => void)[];\n  readonly #promise: Promise<T>;\n  #resolve?: (value: T | PromiseLike<T>) => void;\n  #reject?: (reason?: any) => void;\n\n  constructor(\n    executor: (\n      resolve: (value: T | PromiseLike<T>) => void,\n      reject: (reason?: any) => void,\n      onCancel: OnCancel,\n    ) => void,\n  ) {\n    this.#isResolved = false;\n    this.#isRejected = false;\n    this.#isCancelled = false;\n    this.#cancelHandlers = [];\n    this.#promise = new Promise<T>((resolve, reject) => {\n      this.#resolve = resolve;\n      this.#reject = reject;\n\n      const onResolve = (value: T | PromiseLike<T>): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#isResolved = true;\n        this.#resolve?.(value);\n      };\n\n      const onReject = (reason?: any): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#isRejected = true;\n        this.#reject?.(reason);\n      };\n\n      const onCancel = (cancelHandler: () => void): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#cancelHandlers.push(cancelHandler);\n      };\n\n      Object.defineProperty(onCancel, \"isResolved\", {\n        get: (): boolean => this.#isResolved,\n      });\n\n      Object.defineProperty(onCancel, \"isRejected\", {\n        get: (): boolean => this.#isRejected,\n      });\n\n      Object.defineProperty(onCancel, \"isCancelled\", {\n        get: (): boolean => this.#isCancelled,\n      });\n\n      return executor(onResolve, onReject, onCancel as OnCancel);\n    });\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"Cancellable Promise\";\n  }\n\n  public then<TResult1 = T, TResult2 = never>(\n    onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): Promise<TResult1 | TResult2> {\n    return this.#promise.then(onFulfilled, onRejected);\n  }\n\n  public catch<TResult = never>(\n    onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): Promise<T | TResult> {\n    return this.#promise.catch(onRejected);\n  }\n\n  public finally(onFinally?: (() => void) | null): Promise<T> {\n    return this.#promise.finally(onFinally);\n  }\n\n  public cancel(): void {\n    if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n      return;\n    }\n    this.#isCancelled = true;\n    if (this.#cancelHandlers.length) {\n      try {\n        for (const cancelHandler of this.#cancelHandlers) {\n          cancelHandler();\n        }\n      } catch (error) {\n        console.warn(\"Cancellation threw an error\", error);\n        return;\n      }\n    }\n    this.#cancelHandlers.length = 0;\n    this.#reject?.(new CancelError(\"Request aborted\"));\n  }\n\n  public get isCancelled(): boolean {\n    return this.#isCancelled;\n  }\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from \"./ApiRequestOptions\";\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\ntype Headers = Record<string, string>;\n\nexport type OpenAPIConfig = {\n  BASE: string;\n  VERSION: string;\n  WITH_CREDENTIALS: boolean;\n  CREDENTIALS: \"include\" | \"omit\" | \"same-origin\";\n  TOKEN?: string | Resolver<string> | undefined;\n  USERNAME?: string | Resolver<string> | undefined;\n  PASSWORD?: string | Resolver<string> | undefined;\n  HEADERS?: Headers | Resolver<Headers> | undefined;\n  ENCODE_PATH?: ((path: string) => string) | undefined;\n};\n\nexport const OpenAPI: OpenAPIConfig = {\n  BASE: \"https://sindri.app\",\n  VERSION: \"1.5.40\",\n  WITH_CREDENTIALS: false,\n  CREDENTIALS: \"include\",\n  TOKEN: undefined,\n  USERNAME: undefined,\n  PASSWORD: undefined,\n  HEADERS: undefined,\n  ENCODE_PATH: undefined,\n};\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport axios from \"axios\";\nimport type {\n  AxiosError,\n  AxiosRequestConfig,\n  AxiosResponse,\n  AxiosInstance,\n} from \"axios\";\nimport { FormData } from \"lib/isomorphic\"; // DO NOT REMOVE OR CHANGE THIS, MANUAL EDIT!!!\n\nimport { ApiError } from \"./ApiError\";\nimport type { ApiRequestOptions } from \"./ApiRequestOptions\";\nimport type { ApiResult } from \"./ApiResult\";\nimport { CancelablePromise } from \"./CancelablePromise\";\nimport type { OnCancel } from \"./CancelablePromise\";\nimport type { OpenAPIConfig } from \"./OpenAPI\";\n\nexport const isDefined = <T>(\n  value: T | null | undefined,\n): value is Exclude<T, null | undefined> => {\n  return value !== undefined && value !== null;\n};\n\nexport const isString = (value: any): value is string => {\n  return typeof value === \"string\";\n};\n\nexport const isStringWithValue = (value: any): value is string => {\n  return isString(value) && value !== \"\";\n};\n\nexport const isBlob = (value: any): value is Blob => {\n  return (\n    typeof value === \"object\" &&\n    typeof value.type === \"string\" &&\n    typeof value.stream === \"function\" &&\n    typeof value.arrayBuffer === \"function\" &&\n    typeof value.constructor === \"function\" &&\n    typeof value.constructor.name === \"string\" &&\n    /^(Blob|File)$/.test(value.constructor.name) &&\n    /^(Blob|File)$/.test(value[Symbol.toStringTag])\n  );\n};\n\nexport const isFormData = (value: any): value is FormData => {\n  return value instanceof FormData;\n};\n\nexport const isSuccess = (status: number): boolean => {\n  return status >= 200 && status < 300;\n};\n\nexport const base64 = (str: string): string => {\n  try {\n    return btoa(str);\n  } catch (err) {\n    // @ts-ignore\n    return Buffer.from(str).toString(\"base64\");\n  }\n};\n\nexport const getQueryString = (params: Record<string, any>): string => {\n  const qs: string[] = [];\n\n  const append = (key: string, value: any) => {\n    qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n  };\n\n  const process = (key: string, value: any) => {\n    if (isDefined(value)) {\n      if (Array.isArray(value)) {\n        value.forEach((v) => {\n          process(key, v);\n        });\n      } else if (typeof value === \"object\") {\n        Object.entries(value).forEach(([k, v]) => {\n          process(`${key}[${k}]`, v);\n        });\n      } else {\n        append(key, value);\n      }\n    }\n  };\n\n  Object.entries(params).forEach(([key, value]) => {\n    process(key, value);\n  });\n\n  if (qs.length > 0) {\n    return `?${qs.join(\"&\")}`;\n  }\n\n  return \"\";\n};\n\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\n  const encoder = config.ENCODE_PATH || encodeURI;\n\n  const path = options.url\n    .replace(\"{api-version}\", config.VERSION)\n    .replace(/{(.*?)}/g, (substring: string, group: string) => {\n      if (options.path?.hasOwnProperty(group)) {\n        return encoder(String(options.path[group]));\n      }\n      return substring;\n    });\n\n  const url = `${config.BASE}${path}`;\n  if (options.query) {\n    return `${url}${getQueryString(options.query)}`;\n  }\n  return url;\n};\n\nexport const getFormData = (\n  options: ApiRequestOptions,\n): FormData | undefined => {\n  if (options.formData) {\n    // This is a manual edit to allow `FormData` to be passed in directly.\n    // DO NOT REMOVE THIS!\n    if (options.formData instanceof FormData) {\n      return options.formData;\n    }\n\n    const formData = new FormData();\n\n    const process = (key: string, value: any) => {\n      if (isString(value) || isBlob(value)) {\n        formData.append(key, value);\n      } else {\n        formData.append(key, JSON.stringify(value));\n      }\n    };\n\n    Object.entries(options.formData)\n      .filter(([_, value]) => isDefined(value))\n      .forEach(([key, value]) => {\n        if (Array.isArray(value)) {\n          value.forEach((v) => process(key, v));\n        } else {\n          process(key, value);\n        }\n      });\n\n    return formData;\n  }\n  return undefined;\n};\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\n\nexport const resolve = async <T>(\n  options: ApiRequestOptions,\n  resolver?: T | Resolver<T>,\n): Promise<T | undefined> => {\n  if (typeof resolver === \"function\") {\n    return (resolver as Resolver<T>)(options);\n  }\n  return resolver;\n};\n\nexport const getHeaders = async (\n  config: OpenAPIConfig,\n  options: ApiRequestOptions,\n  formData?: FormData,\n): Promise<Record<string, string>> => {\n  const token = await resolve(options, config.TOKEN);\n  const username = await resolve(options, config.USERNAME);\n  const password = await resolve(options, config.PASSWORD);\n  const additionalHeaders = await resolve(options, config.HEADERS);\n  // DO NOT REMOVE THIS, MANUAL EDIT!\n  const formHeaders =\n    (formData &&\n      \"getHeaders\" in formData &&\n      typeof formData?.getHeaders === \"function\" &&\n      formData?.getHeaders()) ||\n    {};\n\n  const headers = Object.entries({\n    Accept: \"application/json\",\n    ...additionalHeaders,\n    ...options.headers,\n    ...formHeaders,\n  })\n    .filter(([_, value]) => isDefined(value))\n    .reduce(\n      (headers, [key, value]) => ({\n        ...headers,\n        [key]: String(value),\n      }),\n      {} as Record<string, string>,\n    );\n\n  if (isStringWithValue(token)) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  if (isStringWithValue(username) && isStringWithValue(password)) {\n    const credentials = base64(`${username}:${password}`);\n    headers[\"Authorization\"] = `Basic ${credentials}`;\n  }\n\n  if (options.body) {\n    if (options.mediaType) {\n      headers[\"Content-Type\"] = options.mediaType;\n    } else if (isBlob(options.body)) {\n      headers[\"Content-Type\"] = options.body.type || \"application/octet-stream\";\n    } else if (isString(options.body)) {\n      headers[\"Content-Type\"] = \"text/plain\";\n    } else if (!isFormData(options.body)) {\n      headers[\"Content-Type\"] = \"application/json\";\n    }\n  }\n\n  return headers;\n};\n\nexport const getRequestBody = (options: ApiRequestOptions): any => {\n  if (options.body) {\n    return options.body;\n  }\n  return undefined;\n};\n\nexport const sendRequest = async <T>(\n  config: OpenAPIConfig,\n  options: ApiRequestOptions,\n  url: string,\n  body: any,\n  formData: FormData | undefined,\n  headers: Record<string, string>,\n  onCancel: OnCancel,\n  axiosClient: AxiosInstance,\n): Promise<AxiosResponse<T>> => {\n  const source = axios.CancelToken.source();\n\n  const requestConfig: AxiosRequestConfig = {\n    url,\n    headers,\n    data: body ?? formData,\n    method: options.method,\n    withCredentials: config.WITH_CREDENTIALS,\n    cancelToken: source.token,\n  };\n\n  onCancel(() => source.cancel(\"The user aborted a request.\"));\n\n  try {\n    return await axiosClient.request(requestConfig);\n  } catch (error) {\n    const axiosError = error as AxiosError<T>;\n    if (axiosError.response) {\n      return axiosError.response;\n    }\n    throw error;\n  }\n};\n\nexport const getResponseHeader = (\n  response: AxiosResponse<any>,\n  responseHeader?: string,\n): string | undefined => {\n  if (responseHeader) {\n    const content = response.headers[responseHeader];\n    if (isString(content)) {\n      return content;\n    }\n  }\n  return undefined;\n};\n\nexport const getResponseBody = (response: AxiosResponse<any>): any => {\n  if (response.status !== 204) {\n    return response.data;\n  }\n  return undefined;\n};\n\nexport const catchErrorCodes = (\n  options: ApiRequestOptions,\n  result: ApiResult,\n): void => {\n  const errors: Record<number, string> = {\n    400: \"Bad Request\",\n    401: \"Unauthorized\",\n    403: \"Forbidden\",\n    404: \"Not Found\",\n    500: \"Internal Server Error\",\n    502: \"Bad Gateway\",\n    503: \"Service Unavailable\",\n    ...options.errors,\n  };\n\n  const error = errors[result.status];\n  if (error) {\n    throw new ApiError(options, result, error);\n  }\n\n  if (!result.ok) {\n    const errorStatus = result.status ?? \"unknown\";\n    const errorStatusText = result.statusText ?? \"unknown\";\n    const errorBody = (() => {\n      try {\n        return JSON.stringify(result.body, null, 2);\n      } catch (e) {\n        return undefined;\n      }\n    })();\n\n    throw new ApiError(\n      options,\n      result,\n      `Generic Error: status: ${errorStatus}; status text: ${errorStatusText}; body: ${errorBody}`,\n    );\n  }\n};\n\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @param axiosClient The axios client instance to use\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = <T>(\n  config: OpenAPIConfig,\n  options: ApiRequestOptions,\n  axiosClient: AxiosInstance = axios,\n): CancelablePromise<T> => {\n  return new CancelablePromise(async (resolve, reject, onCancel) => {\n    try {\n      const url = getUrl(config, options);\n      const formData = getFormData(options);\n      const body = getRequestBody(options);\n      const headers = await getHeaders(config, options, formData);\n\n      if (!onCancel.isCancelled) {\n        const response = await sendRequest<T>(\n          config,\n          options,\n          url,\n          body,\n          formData,\n          headers,\n          onCancel,\n          axiosClient,\n        );\n        const responseBody = getResponseBody(response);\n        const responseHeader = getResponseHeader(\n          response,\n          options.responseHeader,\n        );\n\n        const result: ApiResult = {\n          url,\n          ok: isSuccess(response.status),\n          status: response.status,\n          statusText: response.statusText,\n          body: responseHeader ?? responseBody,\n        };\n\n        catchErrorCodes(options, result);\n\n        resolve(result.body);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n","import { File as NodeFile } from \"buffer\";\n\nimport { FormData as NodeFormData } from \"formdata-node\";\n\nexport function assertType<T>(value: unknown) {\n  function isType<T>(value: unknown): value is T {\n    return true || value;\n  }\n  if (!isType<T>(value)) throw new Error(\"Impossible.\");\n}\n\nexport type { NodeFile, NodeFormData };\nexport type BrowserFile = File;\nexport type BrowserFormData = FormData;\n\nexport const File = process.env.BROWSER_BUILD ? window.File : NodeFile;\nexport const FormData = process.env.BROWSER_BUILD\n  ? window.FormData\n  : NodeFormData;\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport { FormData } from \"lib/isomorphic\"; // DO NOT REMOVE OR CHANGE THIS, MANUAL EDIT!!!\n\nimport type { ActionResponse } from \"../models/ActionResponse\";\nimport type { CircomCircuitInfoResponse } from \"../models/CircomCircuitInfoResponse\";\nimport type { GnarkCircuitInfoResponse } from \"../models/GnarkCircuitInfoResponse\";\nimport type { Halo2CircuitInfoResponse } from \"../models/Halo2CircuitInfoResponse\";\nimport type { NoirCircuitInfoResponse } from \"../models/NoirCircuitInfoResponse\";\nimport type { ProofInfoResponse } from \"../models/ProofInfoResponse\";\n\nimport type { CancelablePromise } from \"../core/CancelablePromise\";\nimport { OpenAPI } from \"../core/OpenAPI\";\nimport { request as __request } from \"../core/request\";\n\nexport class CircuitsService {\n  /**\n   * Create Circuit\n   * Create a circuit.\n   * @param formData\n   * @returns any Created\n   * @throws ApiError\n   */\n  public static circuitCreate(\n    formData: // This is a manual edit to allow `FormData` to be passed in directly:\n    | FormData // DO NOT REMOVE THIS!\n      | {\n          files: Array<Blob>;\n          /**\n           * Tags for a circuit.\n           */\n          tags?: Array<string>;\n        },\n  ): CancelablePromise<\n    | CircomCircuitInfoResponse\n    | Halo2CircuitInfoResponse\n    | GnarkCircuitInfoResponse\n    | NoirCircuitInfoResponse\n  > {\n    return __request(OpenAPI, {\n      method: \"POST\",\n      url: \"/api/v1/circuit/create\",\n      formData: formData,\n      mediaType: \"multipart/form-data\",\n      errors: {\n        412: `Precondition Failed`,\n        422: `Unprocessable Entity`,\n        500: `Internal Server Error`,\n        501: `Not Implemented`,\n      },\n    });\n  }\n\n  /**\n   * Circuit List\n   * Return a list of CircuitInfoResponse for circuits related to user.\n   * @param includeVerificationKey\n   * @returns any OK\n   * @throws ApiError\n   */\n  public static circuitList(\n    includeVerificationKey: boolean = false,\n  ): CancelablePromise<\n    Array<\n      | CircomCircuitInfoResponse\n      | Halo2CircuitInfoResponse\n      | GnarkCircuitInfoResponse\n      | NoirCircuitInfoResponse\n    >\n  > {\n    return __request(OpenAPI, {\n      method: \"GET\",\n      url: \"/api/v1/circuit/list\",\n      query: {\n        include_verification_key: includeVerificationKey,\n      },\n      errors: {\n        500: `Internal Server Error`,\n      },\n    });\n  }\n\n  /**\n   * Circuit Detail\n   * Get info for existing circuit\n   * @param circuitId\n   * @param includeVerificationKey\n   * @returns any OK\n   * @throws ApiError\n   */\n  public static circuitDetail(\n    circuitId: string,\n    includeVerificationKey: boolean = true,\n  ): CancelablePromise<\n    | CircomCircuitInfoResponse\n    | Halo2CircuitInfoResponse\n    | GnarkCircuitInfoResponse\n    | NoirCircuitInfoResponse\n  > {\n    return __request(OpenAPI, {\n      method: \"GET\",\n      url: \"/api/v1/circuit/{circuit_id}/detail\",\n      path: {\n        circuit_id: circuitId,\n      },\n      query: {\n        include_verification_key: includeVerificationKey,\n      },\n      errors: {\n        404: `Not Found`,\n        500: `Internal Server Error`,\n      },\n    });\n  }\n\n  /**\n   * Delete Circuit\n   * Mark the specified circuit and any related proofs as deleted.\n   * @param circuitId\n   * @returns ActionResponse OK\n   * @throws ApiError\n   */\n  public static circuitDelete(\n    circuitId: string,\n  ): CancelablePromise<ActionResponse> {\n    return __request(OpenAPI, {\n      method: \"DELETE\",\n      url: \"/api/v1/circuit/{circuit_id}/delete\",\n      path: {\n        circuit_id: circuitId,\n      },\n      errors: {\n        404: `Not Found`,\n        500: `Internal Server Error`,\n      },\n    });\n  }\n\n  /**\n   * Circuit Proofs\n   * Return list of ProofInfoResponse for proofs of circuit_id related to team.\n   * @param circuitId\n   * @param includeProofInput\n   * @param includeProof\n   * @param includePublic\n   * @param includeVerificationKey\n   * @returns ProofInfoResponse OK\n   * @throws ApiError\n   */\n  public static circuitProofs(\n    circuitId: string,\n    includeProofInput: boolean = false,\n    includeProof: boolean = false,\n    includePublic: boolean = false,\n    includeVerificationKey: boolean = false,\n  ): CancelablePromise<Array<ProofInfoResponse>> {\n    return __request(OpenAPI, {\n      method: \"GET\",\n      url: \"/api/v1/circuit/{circuit_id}/proofs\",\n      path: {\n        circuit_id: circuitId,\n      },\n      query: {\n        include_proof_input: includeProofInput,\n        include_proof: includeProof,\n        include_public: includePublic,\n        include_verification_key: includeVerificationKey,\n      },\n      errors: {\n        404: `Not Found`,\n        500: `Internal Server Error`,\n      },\n    });\n  }\n\n  /**\n   * Create Proof for Circuit\n   * Prove a circuit with specific inputs.\n   * @param circuitId\n   * @param formData\n   * @returns ProofInfoResponse Created\n   * @throws ApiError\n   */\n  public static proofCreate(\n    circuitId: string,\n    formData: {\n      /**\n       * JSON-serialized string for the proof input.\n       */\n      proof_input: string;\n      /**\n       * Perform an internal verification on the resulting proof.\n       */\n      perform_verify?: boolean;\n      /**\n       * Internal prover implementation setting.\n       */\n      prover_implementation?: string;\n    },\n  ): CancelablePromise<ProofInfoResponse> {\n    return __request(OpenAPI, {\n      method: \"POST\",\n      url: \"/api/v1/circuit/{circuit_id}/prove\",\n      path: {\n        circuit_id: circuitId,\n      },\n      formData: formData,\n      mediaType: \"application/x-www-form-urlencoded\",\n      errors: {\n        404: `Not Found`,\n        412: `Precondition Failed`,\n        501: `Not Implemented`,\n      },\n    });\n  }\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ActionResponse } from \"../models/ActionResponse\";\nimport type { ProofInfoResponse } from \"../models/ProofInfoResponse\";\n\nimport type { CancelablePromise } from \"../core/CancelablePromise\";\nimport { OpenAPI } from \"../core/OpenAPI\";\nimport { request as __request } from \"../core/request\";\n\nexport class ProofsService {\n  /**\n   * Proof List\n   * Return list of ProofInfoResponse for proofs related to team.\n   * @param includeProofInput\n   * @param includeProof\n   * @param includePublic\n   * @param includeVerificationKey\n   * @returns ProofInfoResponse OK\n   * @throws ApiError\n   */\n  public static proofList(\n    includeProofInput: boolean = false,\n    includeProof: boolean = false,\n    includePublic: boolean = false,\n    includeVerificationKey: boolean = false,\n  ): CancelablePromise<Array<ProofInfoResponse>> {\n    return __request(OpenAPI, {\n      method: \"GET\",\n      url: \"/api/v1/proof/list\",\n      query: {\n        include_proof_input: includeProofInput,\n        include_proof: includeProof,\n        include_public: includePublic,\n        include_verification_key: includeVerificationKey,\n      },\n      errors: {\n        500: `Internal Server Error`,\n      },\n    });\n  }\n\n  /**\n   * Proof Detail\n   * Get info for existing proof\n   * @param proofId\n   * @param includeProofInput\n   * @param includeProof\n   * @param includePublic\n   * @param includeVerificationKey\n   * @returns ProofInfoResponse OK\n   * @throws ApiError\n   */\n  public static proofDetail(\n    proofId: string,\n    includeProofInput: boolean = true,\n    includeProof: boolean = true,\n    includePublic: boolean = true,\n    includeVerificationKey: boolean = true,\n  ): CancelablePromise<ProofInfoResponse> {\n    return __request(OpenAPI, {\n      method: \"GET\",\n      url: \"/api/v1/proof/{proof_id}/detail\",\n      path: {\n        proof_id: proofId,\n      },\n      query: {\n        include_proof_input: includeProofInput,\n        include_proof: includeProof,\n        include_public: includePublic,\n        include_verification_key: includeVerificationKey,\n      },\n      errors: {\n        404: `Not Found`,\n        500: `Internal Server Error`,\n      },\n    });\n  }\n\n  /**\n   * Delete Proof\n   * Mark the specified proof as deleted.\n   * @param proofId\n   * @returns ActionResponse OK\n   * @throws ApiError\n   */\n  public static proofDelete(\n    proofId: string,\n  ): CancelablePromise<ActionResponse> {\n    return __request(OpenAPI, {\n      method: \"DELETE\",\n      url: \"/api/v1/proof/{proof_id}/delete\",\n      path: {\n        proof_id: proofId,\n      },\n      errors: {\n        404: `Not Found`,\n        500: `Internal Server Error`,\n      },\n    });\n  }\n}\n","import fs from \"fs\";\nimport path from \"path\";\n\nimport envPaths from \"env-paths\";\nimport _ from \"lodash\";\nimport { z } from \"zod\";\n\nimport { OpenAPI } from \"lib/api\";\nimport { logger } from \"lib/logging\";\n\nconst getConfigPath = (): string => {\n  const paths = envPaths(\"sindri\", {\n    suffix: \"\",\n  });\n  return path.join(paths.config, \"sindri.conf.json\");\n};\n\nconst ConfigSchema = z.object({\n  auth: z\n    .nullable(\n      z.object({\n        apiKey: z.string(),\n        apiKeyId: z.string(),\n        apiKeyName: z.string(),\n        baseUrl: z.string().url(),\n        teamId: z.number(),\n        teamSlug: z.string(),\n      }),\n    )\n    .default(null),\n});\n\ntype ConfigSchema = z.infer<typeof ConfigSchema>;\n\nconst defaultConfig: ConfigSchema = ConfigSchema.parse({});\n\nexport const loadConfig = (): ConfigSchema => {\n  const configPath = getConfigPath();\n  if (fs.existsSync(configPath)) {\n    logger.debug(`Loading config from \"${configPath}\".`);\n    try {\n      const configFileContents: string = fs.readFileSync(configPath, {\n        encoding: \"utf-8\",\n      });\n      const loadedConfig = ConfigSchema.parse(JSON.parse(configFileContents));\n      logger.debug(\"Config loaded successfully.\");\n      return loadedConfig;\n    } catch (error) {\n      logger.warn(\n        `The config schema in \"${configPath}\" is invalid and will not be used.\\n` +\n          `To remove it and start fresh, run:\\n    rm ${configPath}`,\n      );\n      logger.debug(error);\n    }\n  }\n  logger.debug(\n    `Config file \"${configPath}\" does not exist, initializing default config.`,\n  );\n  return _.cloneDeep(defaultConfig);\n};\n\nexport class Config {\n  protected _config!: ConfigSchema;\n  protected static instance: Config;\n\n  constructor() {\n    if (!Config.instance) {\n      this._config = loadConfig();\n      Config.instance = this;\n      // Prepare API the client with the loaded credentials.\n      if (this._config.auth) {\n        OpenAPI.BASE = this._config.auth.baseUrl;\n        OpenAPI.TOKEN = this._config.auth.apiKey;\n      }\n    }\n    return Config.instance;\n  }\n\n  get auth(): ConfigSchema[\"auth\"] {\n    return _.cloneDeep(this._config.auth);\n  }\n\n  get config(): ConfigSchema {\n    return _.cloneDeep(this._config);\n  }\n\n  update(configData: Partial<ConfigSchema>) {\n    // Merge and validate the configs.\n    logger.debug(\"Merging in config update:\");\n    logger.debug(configData);\n    const newConfig: ConfigSchema = _.cloneDeep(this._config);\n    _.merge(newConfig, configData);\n    this._config = ConfigSchema.parse(newConfig);\n\n    // Create the directory if it doesn't exist.\n    const configPath = getConfigPath();\n    const directory = path.dirname(configPath);\n    if (!fs.existsSync(directory)) {\n      fs.mkdirSync(directory, { recursive: true });\n    }\n\n    // Write out the new config.\n    logger.debug(`Writing merged config to \"${configPath}\":`, this._config);\n    fs.writeFileSync(configPath, JSON.stringify(this._config, null, 2), {\n      encoding: \"utf-8\",\n    });\n  }\n}\n","import pino from \"pino\";\nimport pretty from \"pino-pretty\";\n\n/**\n * The minimum log level to print.\n */\nexport type LogLevel =\n  | \"silent\"\n  | \"fatal\"\n  | \"error\"\n  | \"warn\"\n  | \"info\"\n  | \"debug\"\n  | \"trace\";\n\nexport const logger = pino(\n  process.env.BROWSER_BUILD\n    ? {\n        browser: { asObject: true },\n      }\n    : pretty({\n        colorize: true,\n        destination: 2,\n        ignore: \"hostname,pid\",\n        levelFirst: false,\n        sync: true,\n      }),\n);\n\nlogger.level = process.env.NODE_ENV === \"production\" ? \"silent\" : \"info\";\n\nexport const print = console.log;\n","import { SindriClient } from \"./client\";\n\nexport default new SindriClient();\n\nexport type * from \"./client\";\nexport type { LogLevel } from \"./logging\";\n"],"mappings":"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","names":["readFile","stat","path","gzip","walk","tar","Tar","ApiError","request","response","message","CancelError","message","CancelablePromise","#isResolved","#isRejected","#isCancelled","#cancelHandlers","#promise","#resolve","#reject","executor","resolve","reject","onResolve","value","onReject","reason","onCancel","cancelHandler","onFulfilled","onRejected","onFinally","error","OpenAPI","axios","NodeFile","NodeFormData","File","NodeFile","FormData","NodeFormData","isDefined","value","isString","isStringWithValue","isBlob","isFormData","FormData","isSuccess","status","base64","str","getQueryString","params","qs","append","key","process","v","k","getUrl","config","options","encoder","path","substring","group","url","getFormData","formData","_","resolve","resolver","getHeaders","token","username","password","additionalHeaders","formHeaders","headers","credentials","getRequestBody","sendRequest","body","onCancel","axiosClient","source","axios","requestConfig","error","axiosError","getResponseHeader","response","responseHeader","content","getResponseBody","catchErrorCodes","result","ApiError","errorStatus","errorStatusText","errorBody","request","CancelablePromise","reject","responseBody","CircuitsService","formData","request","OpenAPI","includeVerificationKey","circuitId","includeProofInput","includeProof","includePublic","ProofsService","includeProofInput","includeProof","includePublic","includeVerificationKey","request","OpenAPI","proofId","fs","path","envPaths","_","z","pino","pretty","logger","getConfigPath","paths","envPaths","path","ConfigSchema","z","defaultConfig","loadConfig","configPath","fs","logger","configFileContents","loadedConfig","error","_","SindriClient","authOptions","OpenAPI","logger","level","config","loadConfig","project","tags","formData","FormData","tag","projectStats","stat","tarballFilename","path","tarballContent","readFile","File","sindriJsonPath","sindriJsonContent","sindriJson","circuitName","files","walk","file","sindriJsonFilename","a","b","tarStream","tar","code","message","sindriJsonFile","tarball","Tar","content","resolve","gzippedTarball","gzip","tarFile","oldHeaders","createResponse","CircuitsService","circuitId","response","ProofsService","proofId","proofInput","lib_default","SindriClient"]}